/*
 * Copyright sablintolya@gmail.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.github.ma1uta.identity.dao;

import io.github.ma1uta.identity.model.Session;

import java.util.List;

/**
 * Session Dao contract.
 */
public interface SessionDao {

    /**
     * Upsert (UPdate or inSERT) a new session.
     *
     * @param sid          session id.
     * @param token        secret session token generated by server.
     * @param clientSecret secret generated by client device.
     * @param address      address.
     * @param medium       address type.
     * @param sendAttempt  number of the attempt.
     * @param nextLink     link to redirect after verification.
     */
    void insertOrUpdate(String sid, String token, String clientSecret, String medium, String address, String sendAttempt, String nextLink);

    /**
     * Find sessions by client secret, address and medium.
     *
     * @param clientSecret client secret.
     * @param address      address.
     * @param medium       address type.
     * @return sessions.
     */
    List<Session> findBySecretEmail(String clientSecret, String address, String medium);

    /**
     * Find sessions by client secret and session id.
     *
     * @param clientSecret client secret.
     * @param sid          session id.
     * @return sessions.
     */
    List<Session> findBySecretSid(String clientSecret, String sid);

    /**
     * Find session by client secret, session id and token.
     *
     * @param clientSecret client session.
     * @param sid          session id.
     * @param token        token.
     * @return sessions.
     */
    List<Session> findBySecretSidToken(String clientSecret, String sid, String token);

    /**
     * Delete all sessions create more that day ago and not validated.
     */
    void deleteOldest();

    /**
     * Validate session.
     *
     * @param sid session id.
     */
    void validate(String sid);
}
