{
  "swagger" : "2.0",
  "info" : {
    "description" : "Matrix Client-Server Api",
    "version" : "r0.3.0",
    "title" : "Matrix Client-Server Api",
    "termsOfService" : "http://www.github.com/kongchen/swagger-maven-plugin",
    "contact" : {
      "name" : "Anatoly",
      "url" : "https://github.com/ma1uta/jeon",
      "email" : "sablintolya@gmail.com"
    },
    "license" : {
      "name" : "Apache 2.0",
      "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host" : "matrix.org:8448",
  "tags" : [ {
    "name" : "To read events, the intended flow of operation is for clients to first call the sync API without a since parameter. This returns the most recent message events for each room, as well as the state of the room at the start of the returned timeline. The response also includes a next_batch field, which should be used as the value of the since parameter in the next call to sync. Finally, the response includes, for each room, a prev_batch field, which can be passed as a start parameter to the rooms&lt;room_id&gt;messages API to retrieve earlier messages."
  }, {
    "name" : "_matrix",
    "description" : "If a client does not recognize any or all login flows it can use the fallback login API."
  }, {
    "name" : "_matrixclientr0",
    "description" : "The search API allows clients to perform full text search across events in all rooms that the user has been in, including those that they have left. Only events that the user is allowed to see will be searched, e.g. it won't include events in rooms that happened after you left."
  }, {
    "name" : "_matrixclientr0admin",
    "description" : "Gets information about a particular user"
  }, {
    "name" : "_matrixclientr0keys",
    "description" : "Matrix optionally supports end-to-end encryption, allowing rooms to be created whose conversation contents is not decryptable or interceptable on any of the participating homeservers."
  }, {
    "name" : "_matrixclientr0logincas",
    "description" : "Central Authentication Service (CAS) is a web-based single sign-on protocol."
  }, {
    "name" : "_matrixclientr0presence",
    "description" : "Each user has the concept of presence information."
  }, {
    "name" : "_matrixclientr0profile",
    "description" : "Profiles."
  }, {
    "name" : "_matrixclientr0rooms",
    "description" : "When a client receives an m.typing event, it MUST use the user ID list to REPLACE its knowledge of every user who is currently typing. The reason for this is that the server does not remember users who are not currently typing as that list gets big quickly. The client should mark as not typing any user ID who is not in that list."
  }, {
    "name" : "_matrixclientr0sendToDevice",
    "description" : "This module provides a means by which clients can exchange signalling messages without them being stored permanently as part of a shared communication history. A message is delivered exactly once to each client device."
  }, {
    "name" : "_matrixclientr0user",
    "description" : "Users can add tags to rooms. Tags are short strings used to label rooms, e.g. \"work\", \"family\". A room may have multiple tags. Tags are only visible to the user that set them but are shared across all their devices."
  }, {
    "name" : "_matrixclientr0user_directory",
    "description" : "User directory."
  }, {
    "name" : "_matrixclientr0voip",
    "description" : "The homeserver MAY provide a TURN server which clients can use to contact the remote party. The following HTTP API endpoints will be used by clients in order to get information about the TURN server."
  }, {
    "name" : "_matrixclientversions",
    "description" : "Gets the versions of the specification supported by the server."
  }, {
    "name" : "_matrixmediar0",
    "description" : "This module allows users to upload content to their homeserver which is retrievable from other homeservers. Its' purpose is to allow users to share attachments in a room. Key locations are represented as Matrix Key (MXC) URIs."
  } ],
  "schemes" : [ "http" ],
  "paths" : {
    "/_matrix/client/r0/account/3pid" : {
      "get" : {
        "tags" : [ "_matrixclientr0" ],
        "summary" : "Gets a list of the third party identifiers that the homeserver has associated with the user's account",
        "description" : "This is not the same as the list of third party identifiers bound to the user's Matrix ID in Identity Servers. Identifiers in this list may be used by the homeserver as, for example, identifiers that it will accept to reset the user's account password.",
        "operationId" : "showThreePid",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "The lookup was successful",
            "schema" : {
              "$ref" : "#/definitions/ThreePidResponse"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "_matrixclientr0" ],
        "summary" : "Adds contact information to the user's account",
        "description" : "",
        "operationId" : "updateThreePid",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "new contact information",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ThreePidRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The addition was successful.",
            "schema" : {
              "$ref" : "#/definitions/EmptyResponse"
            }
          },
          "403" : {
            "description" : "The credentials could not be verified with the identity server."
          }
        }
      }
    },
    "/_matrix/client/r0/account/3pid/email/requestToken" : {
      "post" : {
        "tags" : [ "_matrixclientr0" ],
        "summary" : "Proxies the identity server API validate/email/requestToken",
        "description" : "roxies the identity server API validate/email/requestToken, but first checks that the given email address is not already associated with an account on this Home Server. This API should be used to request validation tokens when adding an email address to an account. This API's parameters and response is identical to that of the HS API /register/email/requestToken endpoint.",
        "operationId" : "threePidRequestToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "An email was sent to the given address",
            "schema" : {
              "$ref" : "#/definitions/EmptyResponse"
            }
          }
        }
      }
    },
    "/_matrix/client/r0/account/deactivate" : {
      "post" : {
        "tags" : [ "_matrixclientr0" ],
        "summary" : "Deactivate the user's account, removing all ability for the user to login again.",
        "description" : "This API endpoint uses the User-Interactive Authentication API.An access token should be submitted to this endpoint if the client has an active session.The homeserver may change the flows available depending on whether a valid access token is provided.",
        "operationId" : "deactivate",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "request",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/DeactivateRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The account has been deactivated.",
            "schema" : {
              "$ref" : "#/definitions/EmptyResponse"
            }
          },
          "401" : {
            "description" : "The homeserver requires additional authentication information."
          },
          "429" : {
            "description" : "This request was rate-limited."
          }
        }
      }
    },
    "/_matrix/client/r0/account/password" : {
      "post" : {
        "tags" : [ "_matrixclientr0" ],
        "summary" : "Changes the password for an account on this homeserver.",
        "description" : "This API endpoint uses the User-Interactive Authentication API. An access token should be submitted to this endpoint if the client has an active session. The homeserver may change the flows available depending on whether a valid access token is provided.",
        "operationId" : "password",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "password",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/PasswordRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The password has been changed.",
            "schema" : {
              "$ref" : "#/definitions/EmptyResponse"
            }
          },
          "401" : {
            "description" : "The homeserver requires additional authentication information."
          },
          "429" : {
            "description" : "This request was rate-limited."
          }
        }
      }
    },
    "/_matrix/client/r0/account/password/email/requestToken" : {
      "post" : {
        "tags" : [ "_matrixclientr0" ],
        "summary" : "Proxies the identity server API validate/email/requestToken, but first checks that the given email address is associated with an account on this Home Server.",
        "description" : "This API should be used to request validation tokens when authenticating for the account/password endpoint. This API's parameters and response are identical to that of the HS API /register/email/requestToken except that M_THREEPID_NOT_FOUND may be returned if no account matching the given email address could be found. The server may instead send an email to the given address prompting the user to create an account. M_THREEPID_IN_USE may not be returned.",
        "operationId" : "passwordRequestToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "An email was sent to the given address",
            "schema" : {
              "$ref" : "#/definitions/EmptyResponse"
            }
          }
        }
      }
    },
    "/_matrix/client/r0/account/whoami" : {
      "get" : {
        "tags" : [ "_matrixclientr0" ],
        "summary" : "Gets information about the owner of a given access token",
        "description" : "Note that, as with the rest of the Client-Server API, Application Services may masquerade as users within their namespace by giving a user_id query parameter. In this situation, the server should verify that the given user_id is registered by the appservice, and return it in the response body.",
        "operationId" : "whoami",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "The token belongs to a known user",
            "schema" : {
              "$ref" : "#/definitions/WhoamiResponse"
            }
          }
        }
      }
    },
    "/_matrix/client/r0/admin/whois/{userId}" : {
      "get" : {
        "tags" : [ "_matrixclientr0admin" ],
        "summary" : "his API may be restricted to only be called by the user being looked up, or by a server admin. Server-local administrator privileges are not specified in this document.",
        "description" : "",
        "operationId" : "whois",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The use to look up",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The lookup was successful.",
            "schema" : {
              "$ref" : "#/definitions/AdminResponse"
            }
          }
        }
      }
    },
    "/_matrix/client/r0/auth/{auth}/fallback/web" : {
      "get" : {
        "tags" : [ "_matrix" ],
        "summary" : "Fallback login endpoint",
        "description" : "If a client does not know how to handle a given login type, it can direct the user to a web browser with the URL of a fallback page which will allow the user to complete that login step out-of-band in their web browser.",
        "operationId" : "auth",
        "produces" : [ "text/html" ],
        "parameters" : [ {
          "name" : "auth",
          "in" : "path",
          "description" : "The type name of the stage it is attempting.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "session",
          "in" : "query",
          "description" : "the ID of the session given by the homeserver.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "n HTML page which can perform this authentication stage. This page must use the following JavaScript when the authentication has been completed.",
            "schema" : {
              "type" : "string"
            }
          }
        }
      }
    },
    "/_matrix/client/r0/createRoom" : {
      "post" : {
        "tags" : [ "_matrixclientr0" ],
        "summary" : "Create a new room with various configuration options.",
        "description" : "The server MUST apply the normal state resolution rules when creating the new room, including checking power levels for each event.",
        "operationId" : "create",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "JSON body request.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CreateRoomRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Information about the newly created room.",
            "schema" : {
              "$ref" : "#/definitions/RoomId"
            }
          },
          "400" : {
            "description" : "The request is invalid. A meaningful errcode and description error text will be returned."
          }
        }
      }
    },
    "/_matrix/client/r0/delete_devices" : {
      "post" : {
        "tags" : [ "_matrixclientr0" ],
        "summary" : "Deletes the given devices, and invalidates any access token associated with them.",
        "description" : "This API endpoint uses the User-Interactive Authentication API.",
        "operationId" : "deleteDevices",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "JSON body request",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/DevicesDeleteRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The devices were successfully removed, or had been removed previously.",
            "schema" : {
              "$ref" : "#/definitions/EmptyResponse"
            }
          },
          "401" : {
            "description" : "The homeserver requires additional authentication information."
          }
        }
      }
    },
    "/_matrix/client/r0/devices" : {
      "get" : {
        "tags" : [ "_matrixclientr0" ],
        "summary" : "Gets information about all devices for the current user.",
        "description" : "",
        "operationId" : "devices",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "A list of all registered devices for this user.",
            "schema" : {
              "$ref" : "#/definitions/DevicesResponse"
            }
          }
        }
      }
    },
    "/_matrix/client/r0/devices/{deviceId}" : {
      "get" : {
        "tags" : [ "_matrixclientr0" ],
        "summary" : "Gets information on a single device, by device id.",
        "description" : "",
        "operationId" : "device",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "deviceId",
          "in" : "path",
          "description" : "The device to retrieve",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Device information.",
            "schema" : {
              "$ref" : "#/definitions/Device"
            }
          },
          "404" : {
            "description" : "The current user has no device with the given ID."
          }
        }
      },
      "put" : {
        "tags" : [ "_matrixclientr0" ],
        "summary" : "Updates the metadata on the given device.",
        "description" : "",
        "operationId" : "update",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "deviceId",
          "in" : "path",
          "description" : "The device to update.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The new display name for this device. If not given, the display name is unchanged.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/DeviceUpdateRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The device was successfully updated.",
            "schema" : {
              "$ref" : "#/definitions/EmptyResponse"
            }
          },
          "404" : {
            "description" : "The current user has no device with the given ID."
          }
        }
      },
      "delete" : {
        "tags" : [ "_matrixclientr0" ],
        "summary" : "Deletes the given device, and invalidates any access token associated with it.",
        "description" : "This API endpoint uses the User-Interactive Authentication API.",
        "operationId" : "delete",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "deviceId",
          "in" : "path",
          "description" : "The device to delete",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Additional authentication information for the user-interactive authentication API.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/DeviceDeleteRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The device was successfully removed, or had been removed previously.",
            "schema" : {
              "$ref" : "#/definitions/EmptyResponse"
            }
          },
          "401" : {
            "description" : "The homeserver requires additional authentication information."
          }
        }
      }
    },
    "/_matrix/client/r0/directory/list/room/{roomId}" : {
      "get" : {
        "tags" : [ "_matrixclientr0" ],
        "summary" : "Gets the visibility of a given room on the server's public room directory.",
        "description" : "",
        "operationId" : "getVisibility",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "roomId",
          "in" : "path",
          "description" : "The room ID.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The visibility of the room in the directory",
            "schema" : {
              "$ref" : "#/definitions/RoomVisibility"
            }
          },
          "404" : {
            "description" : "The room is not known to the server"
          }
        }
      },
      "put" : {
        "tags" : [ "_matrixclientr0" ],
        "summary" : "Sets the visibility of a given room in the server's public room directory.",
        "description" : "",
        "operationId" : "setVisibility",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "roomId",
          "in" : "path",
          "description" : "The room ID.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "JSON body request.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/RoomVisibility"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The visibility was updated, or no change was needed.",
            "schema" : {
              "$ref" : "#/definitions/EmptyResponse"
            }
          },
          "404" : {
            "description" : "The room is not known to the server."
          }
        }
      }
    },
    "/_matrix/client/r0/directory/room/{roomAlias}" : {
      "get" : {
        "tags" : [ "_matrixclientr0" ],
        "summary" : "Requests that the server resolve a room alias to a room ID. The server will use the federation API to resolve the alias if the domain part of the alias does not correspond to the server's own domain.",
        "description" : "",
        "operationId" : "resolve",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "roomAlias",
          "in" : "path",
          "description" : "The room alias",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The room ID and other information for this alias.",
            "schema" : {
              "$ref" : "#/definitions/RoomId"
            }
          },
          "404" : {
            "description" : "There is no mapped room ID for this room alias."
          }
        }
      },
      "put" : {
        "tags" : [ "_matrixclientr0" ],
        "summary" : "Create a new mapping from room alias to room ID.",
        "description" : "",
        "operationId" : "newAlias",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "roomAlias",
          "in" : "path",
          "description" : "The room alias to set",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "JSON body request",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/RoomId"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The mapping was created.",
            "schema" : {
              "$ref" : "#/definitions/EmptyResponse"
            }
          },
          "409" : {
            "description" : "A room alias with that name already exists."
          }
        }
      },
      "delete" : {
        "tags" : [ "_matrixclientr0" ],
        "summary" : "Remove a mapping of room alias to room ID.",
        "description" : "",
        "operationId" : "delete",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "roomAlias",
          "in" : "path",
          "description" : "The room alias to remove.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The mapping was deleted.",
            "schema" : {
              "$ref" : "#/definitions/EmptyResponse"
            }
          }
        }
      }
    },
    "/_matrix/client/r0/events" : {
      "get" : {
        "tags" : [ "To read events, the intended flow of operation is for clients to first call the sync API without a since parameter. This returns the most recent message events for each room, as well as the state of the room at the start of the returned timeline. The response also includes a next_batch field, which should be used as the value of the since parameter in the next call to sync. Finally, the response includes, for each room, a prev_batch field, which can be passed as a start parameter to the rooms&lt;room_id&gt;messages API to retrieve earlier messages." ],
        "summary" : "This will listen for new events related to a particular room and return them to the caller. This will block until an event is received, or until the timeout is reached.",
        "description" : "",
        "operationId" : "events",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "from",
          "in" : "query",
          "description" : "The token to stream from. This token is either from a previous request to this API or from the initial sync API.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "timeout",
          "in" : "query",
          "description" : "The maximum time in milliseconds to wait for an event.",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "room_id",
          "in" : "query",
          "description" : "The room ID for which events should be returned.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The events received, which may be none.",
            "schema" : {
              "$ref" : "#/definitions/Page"
            }
          },
          "400" : {
            "description" : "Bad pagination from parameter."
          }
        }
      }
    },
    "/_matrix/client/r0/join/{roomIdOrAlias}" : {
      "post" : {
        "tags" : [ "_matrixclientr0" ],
        "summary" : "This API starts a user participating in a particular room, if that user is allowed to participate in that room. After this call, the client is allowed to see all current state events in the room, and all subsequent events associated with the room until the user leaves the room.",
        "description" : "",
        "operationId" : "joinByIdOrAlias",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "roomIdOrAlias",
          "in" : "path",
          "description" : "The room identifier or alias to join.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "JSON body request.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/JoinRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The room has been joined. The joined room ID must be returned in the room_id field.",
            "schema" : {
              "$ref" : "#/definitions/RoomId"
            }
          },
          "403" : {
            "description" : "You do not have permission to join the room. A meaningful errcode and description error text will be returned."
          },
          "429" : {
            "description" : "This request was rate-limited."
          }
        }
      }
    },
    "/_matrix/client/r0/joined_rooms" : {
      "get" : {
        "tags" : [ "_matrixclientr0" ],
        "summary" : "This API returns a list of the user's current rooms.",
        "description" : "",
        "operationId" : "joinedRooms",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "A list of the rooms the user is in.",
            "schema" : {
              "$ref" : "#/definitions/JoinedRoomsResponse"
            }
          }
        }
      }
    },
    "/_matrix/client/r0/keys/changes" : {
      "get" : {
        "tags" : [ "_matrixclientr0keys" ],
        "summary" : "Gets a list of users who have updated their device identity keys since a previous sync token.",
        "description" : "The server should include in the results any users who currently share a room with the calling user (ie, both users have membership state join); and added new device identity keys or removed an existing device with identity keys, between from and to.",
        "operationId" : "changes",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The desired start point of the list. Should be the next_batch field from a response to an earlier call to /sync. Users who have not uploaded new device identity keys since this point, nor deleted existing devices with identity keys since then, will be excluded from the results.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The desired end point of the list. Should be the next_batch field from a recent call to /sync - typically the most recent such call. This may be used by the server as a hint to check its caches are up to date.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The list of users who updated their devices.",
            "schema" : {
              "$ref" : "#/definitions/ChangesResponse"
            }
          }
        }
      }
    },
    "/_matrix/client/r0/keys/claim" : {
      "post" : {
        "tags" : [ "_matrixclientr0keys" ],
        "summary" : "Claims one-time keys for use in pre-key messages.",
        "description" : "",
        "operationId" : "claim",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "JSON body request.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ClaimRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The claimed keys.",
            "schema" : {
              "$ref" : "#/definitions/ClaimResponse"
            }
          }
        }
      }
    },
    "/_matrix/client/r0/keys/query" : {
      "post" : {
        "tags" : [ "_matrixclientr0keys" ],
        "summary" : "Returns the current devices and identity keys for the given users.",
        "description" : "",
        "operationId" : "query",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "JSON body request",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/QueryRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The device information.",
            "schema" : {
              "$ref" : "#/definitions/QueryResponse"
            }
          }
        }
      }
    },
    "/_matrix/client/r0/keys/upload" : {
      "post" : {
        "tags" : [ "_matrixclientr0keys" ],
        "summary" : "Publishes end-to-end encryption keys for the device.",
        "description" : "",
        "operationId" : "upload",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "JSON body request",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UploadRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The provided keys were sucessfully uploaded.",
            "schema" : {
              "$ref" : "#/definitions/UploadResponse"
            }
          }
        }
      }
    },
    "/_matrix/client/r0/login" : {
      "post" : {
        "tags" : [ "_matrixclientr0" ],
        "summary" : "Authenticates the user, and issues an access token they can use to authorize themself in subsequent requests",
        "description" : "If the client does not supply a device_id, the server must auto-generate one. The returned access token must be associated with the device_id supplied by the client or generated by the server. The server may invalidate any access token previously associated with that device",
        "operationId" : "login",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "login request",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/LoginRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The user has been authenticated",
            "schema" : {
              "$ref" : "#/definitions/LoginResponse"
            }
          },
          "400" : {
            "description" : "Part of the request was invalid. For example, the login type may not be recognised"
          },
          "401" : {
            "description" : "The login attempt failed. For example, the password may have been incorrect."
          },
          "429" : {
            "description" : "This request was rate-limited."
          }
        }
      }
    },
    "/_matrix/client/r0/login/cas/redirect" : {
      "get" : {
        "tags" : [ "_matrixclientr0logincas" ],
        "summary" : "A web-based Matrix client should instruct the user's browser to navigate to this endpoint in order to log in via CAS.",
        "description" : "The server MUST respond with an HTTP redirect to the CAS interface. The URI MUST include a service parameter giving the path of the /login/cas/ticket endpoint (including the redirectUrl query parameter).",
        "operationId" : "redirect",
        "parameters" : [ {
          "name" : "redirectUrl",
          "in" : "query",
          "description" : "URI to which the user will be redirected after the homeserver has authenticated the user with CAS.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/EmptyResponse"
            }
          },
          "302" : {
            "description" : "A redirect to the CAS interface"
          }
        }
      }
    },
    "/_matrix/client/r0/login/cas/ticket" : {
      "get" : {
        "tags" : [ "_matrixclientr0logincas" ],
        "summary" : "Once the CAS server has authenticated the user, it will redirect the browser to this endpoint (assuming /login/cas/redirect gave it the correct service parameter).",
        "description" : "The server MUST call /proxyValidate on the CAS server, to validate the ticket supplied by the browser. If validation is successful, the server must generate a Matrix login token. It must then respond with an HTTP redirect to the URI given in the redirectUrl parameter, adding a loginToken query parameter giving the generated token. If validation is unsuccessful, the server should respond with a 401 Unauthorized error, the body of which will be displayed to the user.",
        "operationId" : "ticket",
        "parameters" : [ {
          "name" : "redirectUrl",
          "in" : "query",
          "description" : "The redirectUrl originally provided by the client to /login/cas/redirect.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "ticket",
          "in" : "query",
          "description" : "CAS authentication ticket",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/EmptyResponse"
            }
          },
          "302" : {
            "description" : "A redirect to the Matrix client."
          },
          "401" : {
            "description" : "The server was unable to validate the CAS ticket."
          }
        }
      }
    },
    "/_matrix/client/r0/logout" : {
      "post" : {
        "tags" : [ "_matrixclientr0" ],
        "summary" : "Invalidates an existing access token, so that it can no longer be used for authorization.",
        "description" : "",
        "operationId" : "logout",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "The access token used in the request was succesfully invalidated",
            "schema" : {
              "$ref" : "#/definitions/EmptyResponse"
            }
          }
        }
      }
    },
    "/_matrix/client/r0/logout/all" : {
      "post" : {
        "tags" : [ "_matrixclientr0" ],
        "summary" : "Invalidates all access tokens for a user, so that they can no longer be used for authorization. This includes the access token that made this request",
        "description" : "This endpoint does not require UI authorization because UI authorization is designed to protect against attacks where the someone gets hold of a single access token then takes over the account. This endpoint invalidates all access tokens for the user, including the token used in the request, and therefore the attacker is unable to take over the account in this way.",
        "operationId" : "logoutAll",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "The user's access tokens were succesfully invalidated",
            "schema" : {
              "$ref" : "#/definitions/EmptyResponse"
            }
          }
        }
      }
    },
    "/_matrix/client/r0/notifications" : {
      "get" : {
        "tags" : [ "_matrixclientr0" ],
        "summary" : "This API is used to paginate through the list of events that the user has been, or would have been notified about.",
        "description" : "",
        "operationId" : "notifications",
        "parameters" : [ {
          "name" : "from",
          "in" : "query",
          "description" : "Pagination token given to retrieve the next set of events.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "only",
          "in" : "query",
          "description" : "Allows basic filtering of events returned. ",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit on the number of events to return in this request.",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "A batch of events is being returned.",
            "schema" : {
              "$ref" : "#/definitions/NotificationResponse"
            }
          }
        }
      }
    },
    "/_matrix/client/r0/presence/list/{userId}" : {
      "get" : {
        "tags" : [ "_matrixclientr0presence" ],
        "summary" : "Retrieve a list of presence events for every user on this list.",
        "description" : "",
        "operationId" : "getPresenceList",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The user whose presence list should be retrieved.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of presence events for this list.",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "object"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "_matrixclientr0presence" ],
        "summary" : "Adds or removes users from this presence list.",
        "description" : "",
        "operationId" : "setPresenceList",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The user whose presence list is being modified.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "JSON body request",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/JSON body request for presence api."
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The list was updated.",
            "schema" : {
              "$ref" : "#/definitions/EmptyResponse"
            }
          },
          "429" : {
            "description" : "This request was rate-limited."
          }
        }
      }
    },
    "/_matrix/client/r0/presence/{userId}/status" : {
      "get" : {
        "tags" : [ "_matrixclientr0presence" ],
        "summary" : "Get the given user's presence state.",
        "description" : "",
        "operationId" : "getPresenceStatus",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The user whose presence state to get.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The presence state for this user.",
            "schema" : {
              "$ref" : "#/definitions/PresenceStatus"
            }
          },
          "404" : {
            "description" : "There is no presence state for this user. This user may not exist or isn't exposing presence information to you."
          }
        }
      },
      "put" : {
        "tags" : [ "_matrixclientr0presence" ],
        "summary" : "This API sets the given user's presence state. When setting the status, the activity time is updated to reflect that activity; the client does not need to specify the last_active_ago field. You cannot set the presence state of another user.",
        "description" : "",
        "operationId" : "setPresenceStatus",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The user whose presence state to update.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "JSON body request.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/PresenceStatus"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The new presence state was set.",
            "schema" : {
              "$ref" : "#/definitions/EmptyResponse"
            }
          },
          "429" : {
            "description" : "This request was rate-limited."
          }
        }
      }
    },
    "/_matrix/client/r0/profile/{userId}" : {
      "get" : {
        "tags" : [ "_matrixclientr0profile" ],
        "summary" : "Get the combined profile information for this user. This API may be used to fetch the user's own profile information or other users; either locally or on remote homeservers. This API may return keys which are not limited to displayname or avatar_url.",
        "description" : "",
        "operationId" : "profile",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The user whose profile information to get.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The avatar URL for this user.",
            "schema" : {
              "$ref" : "#/definitions/Profile"
            }
          },
          "404" : {
            "description" : "There is no profile information for this user or this user does not exist."
          }
        }
      }
    },
    "/_matrix/client/r0/profile/{userId}/avatar_url" : {
      "get" : {
        "tags" : [ "_matrixclientr0profile" ],
        "summary" : "Get the user's avatar URL. This API may be used to fetch the user's own avatar URL or to query the URL of other users;  either locally or on remote homeservers.",
        "description" : "",
        "operationId" : "showAvatarUrl",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The user whose avatar URL to get.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The avatar URL for this user.",
            "schema" : {
              "$ref" : "#/definitions/AvatarUrl"
            }
          },
          "404" : {
            "description" : "There is no avatar URL for this user or this user does not exist."
          }
        }
      },
      "put" : {
        "tags" : [ "_matrixclientr0profile" ],
        "summary" : "This API sets the given user's avatar URL. You must have permission to set this user's avatar URL, e.g. you need to have their access_token.",
        "description" : "",
        "operationId" : "setAvatarUrl",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The user whose avatar URL to set.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "JSON body request",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/AvatarUrl"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The avatar URL was set.",
            "schema" : {
              "$ref" : "#/definitions/EmptyResponse"
            }
          },
          "429" : {
            "description" : "This request was rate-limited."
          }
        }
      }
    },
    "/_matrix/client/r0/profile/{userId}/displayname" : {
      "get" : {
        "tags" : [ "_matrixclientr0profile" ],
        "summary" : "Get the user's display name. This API may be used to fetch the user's own displayname or to query the name of other users; either locally or on remote homeservers.",
        "description" : "",
        "operationId" : "showDisplayName",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The user whose display name to get.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The display name for this user.",
            "schema" : {
              "$ref" : "#/definitions/DisplayName"
            }
          },
          "404" : {
            "description" : "There is no display name for this user or this user does not exist."
          }
        }
      },
      "put" : {
        "tags" : [ "_matrixclientr0profile" ],
        "summary" : "his API sets the given user's display name. You must have permission to set this user's display name, e.g. you need to have their access_token.",
        "description" : "",
        "operationId" : "setDisplayName",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The user whose display name to set.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "JSON body request.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/DisplayName"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The display name was set.",
            "schema" : {
              "$ref" : "#/definitions/EmptyResponse"
            }
          },
          "429" : {
            "description" : "This request was rate-limited."
          }
        }
      }
    },
    "/_matrix/client/r0/publicRooms" : {
      "get" : {
        "tags" : [ "_matrixclientr0" ],
        "summary" : "Lists the public rooms on the server. This API returns paginated responses. The rooms are ordered by the number of joined members, with the largest rooms first.",
        "description" : "",
        "operationId" : "showPublicRooms",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit the number of results returned.",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "since",
          "in" : "query",
          "description" : "A pagination token from a previous request, allowing clients to get the next (or previous) batch of rooms. The direction of pagination is specified solely by which token is supplied, rather than via an explicit flag.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "server",
          "in" : "query",
          "description" : "The server to fetch the public room lists from. Defaults to the local server.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of the rooms on the server.",
            "schema" : {
              "$ref" : "#/definitions/PublicRoomsResponse"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "_matrixclientr0" ],
        "summary" : "Lists the public rooms on the server, with optional filter. This API returns paginated responses. The rooms are ordered by the number of joined members, with the largest rooms first.",
        "description" : "",
        "operationId" : "searchPublicRooms",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "server",
          "in" : "query",
          "description" : "The server to fetch the public room lists from. Defaults to the local server.",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "JSON body request.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/PublicRoomsRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of the rooms on the server.",
            "schema" : {
              "$ref" : "#/definitions/PublicRoomsResponse"
            }
          }
        }
      }
    },
    "/_matrix/client/r0/pushers" : {
      "get" : {
        "tags" : [ "_matrixclientr0" ],
        "summary" : "Gets all currently active pushers for the authenticated user.",
        "description" : "",
        "operationId" : "showPushers",
        "responses" : {
          "200" : {
            "description" : "The pushers for this user.",
            "schema" : {
              "$ref" : "#/definitions/PushersResponse"
            }
          }
        }
      }
    },
    "/_matrix/client/r0/pushers/set" : {
      "post" : {
        "tags" : [ "_matrixclientr0" ],
        "summary" : "This endpoint allows the creation, modification and deletion of pushers for this user ID. The behaviour of this endpoint varies depending on the values in the JSON body.",
        "description" : "",
        "operationId" : "setPushers",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "JSON body request",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/PushersRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The pusher was set.",
            "schema" : {
              "$ref" : "#/definitions/EmptyResponse"
            }
          },
          "400" : {
            "description" : "One or more of the pusher values were invalid."
          },
          "429" : {
            "description" : "This request was rate-limited."
          }
        }
      }
    },
    "/_matrix/client/r0/pushrules" : {
      "get" : {
        "tags" : [ "_matrixclientr0" ],
        "summary" : "Retrieve all push rulesets for this user. Clients can \"drill-down]\"on the rulesets by suffixing a scope to this path e.g. /pushrules/global/. This will return a subset of this data under the specified key e.g. the global key.",
        "description" : "",
        "operationId" : "pushRules",
        "responses" : {
          "200" : {
            "description" : "All the push rulesets for this user.",
            "schema" : {
              "$ref" : "#/definitions/PushRulesResponse"
            }
          }
        }
      }
    },
    "/_matrix/client/r0/pushrules/{scope}/{kind}/{ruleId}" : {
      "get" : {
        "tags" : [ "_matrixclientr0" ],
        "summary" : "Retrieve a single specified push rule.",
        "description" : "",
        "operationId" : "pushRule",
        "parameters" : [ {
          "name" : "scope",
          "in" : "path",
          "description" : "Global to specify global rules.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "kind",
          "in" : "path",
          "description" : "The kind of rule.",
          "required" : true,
          "type" : "string",
          "enum" : [ "[\"override\"", "\"underride\"", "\"sender\"", "\"room\"", "\"content\"]" ]
        }, {
          "name" : "ruleId",
          "in" : "path",
          "description" : "The identifier for the rule.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The specific push rule. This will also include keys specific to the rule itself such as the rule's actions and conditions if set.",
            "schema" : {
              "$ref" : "#/definitions/PushRule"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "_matrixclientr0" ],
        "summary" : "This endpoint allows the creation, modification and deletion of pushers for this user ID. The behaviour of this endpoint varies depending on the values in the JSON body.",
        "description" : "",
        "operationId" : "update",
        "parameters" : [ {
          "name" : "scope",
          "in" : "path",
          "description" : "Global to specify global rules.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "kind",
          "in" : "path",
          "description" : "The kind of rule.",
          "required" : true,
          "type" : "string",
          "enum" : [ "[\"override\"", "\"underride\"", "\"sender\"", "\"room\"", "\"content\"]." ]
        }, {
          "name" : "ruleId",
          "in" : "path",
          "description" : "The identifier for the rule.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "Use 'before' with a rule_id as its value to make the new rule the next-most important rule with respect to the given user defined rule. It is not possible to add a rule relative to a predefined server rule.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "This makes the new rule the next-less important rule relative to the given user defined rule. It is not possible to add a rule relative to a predefined server rule.",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "JSON body request.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/PushUpdateRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The pusher was set.",
            "schema" : {
              "$ref" : "#/definitions/EmptyResponse"
            }
          },
          "400" : {
            "description" : "There was a problem configuring this push rule."
          },
          "429" : {
            "description" : "This request was rate-limited."
          }
        }
      },
      "delete" : {
        "tags" : [ "_matrixclientr0" ],
        "summary" : "This endpoint removes the push rule defined in the path.",
        "description" : "",
        "operationId" : "delete",
        "parameters" : [ {
          "name" : "scope",
          "in" : "path",
          "description" : "Global to specify global rules.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "kind",
          "in" : "path",
          "description" : "The kind of rule.",
          "required" : true,
          "type" : "string",
          "enum" : [ "[\"override\"", "\"underride\"", "\"sender\"", "\"room\"", "\"content\"]" ]
        }, {
          "name" : "ruleId",
          "in" : "path",
          "description" : "The identifier for the rule.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The push rule was deleted.",
            "schema" : {
              "$ref" : "#/definitions/EmptyResponse"
            }
          }
        }
      }
    },
    "/_matrix/client/r0/pushrules/{scope}/{kind}/{ruleId}/actions" : {
      "get" : {
        "tags" : [ "_matrixclientr0" ],
        "summary" : "This endpoint get the actions for the specified push rule.",
        "description" : "",
        "operationId" : "getActions",
        "parameters" : [ {
          "name" : "scope",
          "in" : "path",
          "description" : "Either global or device/&lt;profile_tag&gt; to specify global rules or device rules for the given profile_tag.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "kind",
          "in" : "path",
          "description" : "The kind of rule.",
          "required" : true,
          "type" : "string",
          "enum" : [ "[\"override\"", "\"underride\"", "\"sender\"", "\"room\"", "\"content\"]." ]
        }, {
          "name" : "ruleId",
          "in" : "path",
          "description" : "The identifier for the rule.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The actions for this push rule.",
            "schema" : {
              "$ref" : "#/definitions/PushActions"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "_matrixclientr0" ],
        "summary" : "This endpoint allows clients to change the actions of a push rule. This can be used to change the actions of builtin rules.",
        "description" : "",
        "operationId" : "setActions",
        "parameters" : [ {
          "name" : "scope",
          "in" : "path",
          "description" : "Global to specify global rules",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "kind",
          "in" : "path",
          "description" : "The kind of rule.",
          "required" : true,
          "type" : "string",
          "enum" : [ "[\"override\"", "\"underride\"", "\"sender\"", "\"room\"", "\"content\"]." ]
        }, {
          "name" : "ruleId",
          "in" : "path",
          "description" : "The identifier for the rule.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "JSON body request.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/PushActions"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The actions for the push rule were set.",
            "schema" : {
              "$ref" : "#/definitions/EmptyResponse"
            }
          }
        }
      }
    },
    "/_matrix/client/r0/pushrules/{scope}/{kind}/{ruleId}/enabled" : {
      "get" : {
        "tags" : [ "_matrixclientr0" ],
        "summary" : "This endpoint gets whether the specified push rule is enabled.",
        "description" : "",
        "operationId" : "getEnabled",
        "parameters" : [ {
          "name" : "scope",
          "in" : "path",
          "description" : "Either global or device/&lt;profile_tag&gt; to specify global rules or device rules for the given profile_tag.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "kind",
          "in" : "path",
          "description" : "The kind of rule.",
          "required" : true,
          "type" : "string",
          "enum" : [ "[\"override\"", "\"underride\"", "\"sender\"", "\"room\"", "\"content\"]." ]
        }, {
          "name" : "ruleId",
          "in" : "path",
          "description" : "The identifier for the rule.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Whether the push rule is enabled.",
            "schema" : {
              "$ref" : "#/definitions/PushEnable"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "_matrixclientr0" ],
        "summary" : "his endpoint allows clients to enable or disable the specified push rule.",
        "description" : "",
        "operationId" : "setEnabled",
        "parameters" : [ {
          "name" : "scope",
          "in" : "path",
          "description" : "Global to specify global rules",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "kind",
          "in" : "path",
          "description" : "The kind of rule.",
          "required" : true,
          "type" : "string",
          "enum" : [ "[\"override\"", "\"underride\"", "\"sender\"", "\"room\"", "\"content\"]." ]
        }, {
          "name" : "ruleId",
          "in" : "path",
          "description" : "The identifier for the rule.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "JSON body request.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/PushEnable"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The push rule was enabled or disabled.",
            "schema" : {
              "$ref" : "#/definitions/EmptyResponse"
            }
          }
        }
      }
    },
    "/_matrix/client/r0/register" : {
      "post" : {
        "tags" : [ "_matrixclientr0" ],
        "summary" : "Register for an account on this homeserver.",
        "description" : "",
        "operationId" : "register",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "kind",
          "in" : "query",
          "description" : "The kind of account to register.",
          "required" : false,
          "type" : "string",
          "default" : "user",
          "enum" : [ "['guest'", "'user']" ]
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "JSON body request",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/RegisterRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The account has been registered",
            "schema" : {
              "$ref" : "#/definitions/LoginResponse"
            }
          },
          "400" : {
            "description" : "Part of the request was invalid."
          },
          "401" : {
            "description" : "The homeserver requires additional authentication information."
          },
          "429" : {
            "description" : "This request was rate-limited."
          }
        }
      }
    },
    "/_matrix/client/r0/register/available" : {
      "get" : {
        "tags" : [ "_matrixclientr0" ],
        "summary" : "Checks to see if a username is available, and valid, for the server.",
        "description" : "he server should check to ensure that, at the time of the request, the username requested is available for use.This includes verifying that an application service has not claimed the username and that the username fits the server'sdesired requirements (for example, a server could dictate that it does not permit usernames with underscores).Matrix clients may wish to use this API prior to attempting registration, however the clients must also be awarethat using this API does not normally reserve the username. This can mean that the username becomes unavailablebetween checking its availability and attempting to register it.",
        "operationId" : "available",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "username",
          "in" : "query",
          "description" : "The username to check the availability of",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The username is available.",
            "schema" : {
              "$ref" : "#/definitions/AvailableResponse"
            }
          },
          "400" : {
            "description" : "Part of the request was invalid or the username is not available"
          },
          "429" : {
            "description" : "This request was rate-limited"
          }
        }
      }
    },
    "/_matrix/client/r0/register/email/requestToken" : {
      "post" : {
        "tags" : [ "_matrixclientr0" ],
        "summary" : "Request token.",
        "description" : "Proxies the identity server API validate/email/requestToken, but first checks that the given email address is not already associated with an account on this Home Server. Note that, for consistency, this API takes JSON objects, though the Identity Server API takes x-www-form-urlencoded parameters. See the Identity Server API for further information.",
        "operationId" : "requestToken",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "request",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/RequestToken"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "An email has been sent to the specified address.",
            "schema" : {
              "$ref" : "#/definitions/EmptyResponse"
            }
          },
          "400" : {
            "description" : "Part of the request was invalid."
          }
        }
      }
    },
    "/_matrix/client/r0/rooms/{roomId}/ban" : {
      "post" : {
        "tags" : [ "_matrixclientr0" ],
        "summary" : "Ban a user in the room. If the user is currently in the room, also kick them.",
        "description" : "",
        "operationId" : "ban",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "roomId",
          "in" : "path",
          "description" : "The room identifier (not alias) from which the user should be banned.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "JSON body request.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/KickRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The user has been kicked and banned from the room.",
            "schema" : {
              "$ref" : "#/definitions/EmptyResponse"
            }
          },
          "403" : {
            "description" : "You do not have permission to ban the user from the room. A meaningful errcode and description error text will be returned."
          }
        }
      }
    },
    "/_matrix/client/r0/rooms/{roomId}/context/{eventId}" : {
      "get" : {
        "tags" : [ "_matrixclientr0rooms" ],
        "summary" : "This API returns a number of events that happened just before and after the specified event.",
        "description" : "This allows clients to get the context surrounding an event.",
        "operationId" : "context",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "roomId",
          "in" : "path",
          "description" : "The room to get events from.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "eventId",
          "in" : "path",
          "description" : "The event to get context around.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The maximum number of events to return. Default: 10.",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "The events and state surrounding the requested event.",
            "schema" : {
              "$ref" : "#/definitions/EventContextResponse"
            }
          }
        }
      }
    },
    "/_matrix/client/r0/rooms/{roomId}/event/{eventId}" : {
      "get" : {
        "tags" : [ "_matrixclientr0rooms" ],
        "summary" : "Get a single event based on roomId/eventId. You must have permission to retrieve this event e.g. by being a member in the room for this event.",
        "description" : "",
        "operationId" : "singleEvent",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "roomId",
          "in" : "path",
          "description" : "The ID of the room the event is in.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "eventId",
          "in" : "path",
          "description" : "The event ID to get.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The full event.",
            "schema" : {
              "$ref" : "#/definitions/Event"
            }
          },
          "404" : {
            "description" : "The event was not found or you do not have permission to read this event."
          }
        }
      }
    },
    "/_matrix/client/r0/rooms/{roomId}/forget" : {
      "post" : {
        "tags" : [ "_matrixclientr0" ],
        "summary" : "This API stops a user remembering about a particular room. In general, history is a first class citizen in Matrix. After this API is called, however, a user will no longer be able to retrieve history for this room. If all users on a homeserver forget a room, the room is eligible for deletion from that homeserver.",
        "description" : "",
        "operationId" : "forget",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "roomId",
          "in" : "path",
          "description" : "The room identifier to forget.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The room has been forgotten.",
            "schema" : {
              "$ref" : "#/definitions/EmptyResponse"
            }
          },
          "429" : {
            "description" : "This request was rate-limited."
          }
        }
      }
    },
    "/_matrix/client/r0/rooms/{roomId}/invite" : {
      "post" : {
        "tags" : [ "_matrixclientr0" ],
        "summary" : "This API invites a user to participate in a particular room. They do not start participating in the room until they actually join the room.",
        "description" : "",
        "operationId" : "invite",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "roomId",
          "in" : "path",
          "description" : "The room identifier (not alias) to which to invite the user.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "JSON body request",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/InviteRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The user has been invited to join the room.",
            "schema" : {
              "$ref" : "#/definitions/EmptyResponse"
            }
          },
          "403" : {
            "description" : "You do not have permission to invite the user to the room. A meaningful errcode and description error text will be returned. "
          },
          "429" : {
            "description" : "This request was rate-limited."
          }
        }
      }
    },
    "/_matrix/client/r0/rooms/{roomId}/join" : {
      "post" : {
        "tags" : [ "_matrixclientr0" ],
        "summary" : "This API starts a user participating in a particular room, if that user is allowed to participate in that room. After this call, the client is allowed to see all current state events in the room, and all subsequent events associated with the room until the user leaves the room.",
        "description" : "",
        "operationId" : "join",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "roomId",
          "in" : "path",
          "description" : "The room identifier (not alias) to join.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "JSON body request",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/JoinRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The room has been joined. The joined room ID must be returned in the room_id field.",
            "schema" : {
              "$ref" : "#/definitions/RoomId"
            }
          },
          "403" : {
            "description" : "You do not have permission to join the room. A meaningful errcode and description error text will be returned."
          },
          "429" : {
            "description" : "This request was rate-limited."
          }
        }
      }
    },
    "/_matrix/client/r0/rooms/{roomId}/joined_members" : {
      "get" : {
        "tags" : [ "_matrixclientr0rooms" ],
        "summary" : "This API returns a map of MXIDs to member info objects for members of the room.",
        "description" : "The current user must be in the room for it to work, unless it is an Application Service in which case any of the AS's users must be in the room. This API is primarily for Application Services and should be faster to respond than/members as it can be implemented more efficiently on the server.",
        "operationId" : "joinedMembers",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "roomId",
          "in" : "path",
          "description" : "The room to get the members of.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "A map of MXID to room member objects.",
            "schema" : {
              "$ref" : "#/definitions/JoinedMembersResponse"
            }
          },
          "403" : {
            "description" : "You aren't a member of the room."
          }
        }
      }
    },
    "/_matrix/client/r0/rooms/{roomId}/kick" : {
      "post" : {
        "tags" : [ "_matrixclientr0" ],
        "summary" : "Kick a user from the room.",
        "description" : "",
        "operationId" : "kick",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "roomId",
          "in" : "path",
          "description" : "The room identifier (not alias) from which the user should be kicked.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "JSON body request",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/KickRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The user has been kicked from the room.",
            "schema" : {
              "$ref" : "#/definitions/EmptyResponse"
            }
          },
          "403" : {
            "description" : "You do not have permission to kick the user from the room. A meaningful errcode and description error text will be returned."
          }
        }
      }
    },
    "/_matrix/client/r0/rooms/{roomId}/leave" : {
      "post" : {
        "tags" : [ "_matrixclientr0" ],
        "summary" : "This API stops a user participating in a particular room. If the user was already in the room, they will no longer be able to see new events in the room. If the room requires an invite to join, they will need to be re-invited before they can re-join. If the user was invited to the room, but had not joined, this call serves to reject the invite.The user will still be allowed to retrieve history from the room which they were previously allowed to see.",
        "description" : "",
        "operationId" : "leave",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "roomId",
          "in" : "path",
          "description" : "The room identifier to leave.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The room has been left.",
            "schema" : {
              "$ref" : "#/definitions/EmptyResponse"
            }
          },
          "429" : {
            "description" : "This request was rate-limited."
          }
        }
      }
    },
    "/_matrix/client/r0/rooms/{roomId}/members" : {
      "get" : {
        "tags" : [ "_matrixclientr0rooms" ],
        "summary" : "Get the list of members for this room.",
        "description" : "",
        "operationId" : "members",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "roomId",
          "in" : "path",
          "description" : "The room to get the member events for.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of members of the room. If you are joined to the room then this will be the current members of the room. If you have left the room then this will be the members of the room when you left.",
            "schema" : {
              "$ref" : "#/definitions/MembersResponse"
            }
          },
          "403" : {
            "description" : "You aren't a member of the room and weren't previously a member of the room."
          }
        }
      }
    },
    "/_matrix/client/r0/rooms/{roomId}/messages" : {
      "get" : {
        "tags" : [ "_matrixclientr0rooms" ],
        "summary" : "This API returns a list of message and state events for a room.",
        "description" : "It uses pagination query parameters to paginate history in the room.",
        "operationId" : "messages",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "roomId",
          "in" : "path",
          "description" : "The room to get events from.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "from",
          "in" : "query",
          "description" : "The token to start returning events from. This token can be obtained from a prev_batch token returned for each room by the sync API, or from a start or end token returned by a previous request to this endpoint.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "to",
          "in" : "query",
          "description" : "The token to stop returning events at. This token can be obtained from a prev_batch token returned for each room by the sync endpoint, or from a start or end token returned by a previous request to this endpoint.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "dir",
          "in" : "query",
          "description" : "The direction to return events from.",
          "required" : true,
          "type" : "string",
          "enum" : [ "['b'", "'f]" ]
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The maximum number of events to return. Default: 10.",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "A JSON RoomEventFilter to filter returned events with.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of messages with a new token to request more.",
            "schema" : {
              "$ref" : "#/definitions/Page"
            }
          },
          "403" : {
            "description" : "You aren't a member of the room."
          }
        }
      }
    },
    "/_matrix/client/r0/rooms/{roomId}/receipt/{receiptType}/{eventId}" : {
      "post" : {
        "tags" : [ "_matrixclientr0rooms" ],
        "summary" : "This API updates the marker for the given receipt type to the event ID specified.",
        "description" : "",
        "operationId" : "receipt",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "roomId",
          "in" : "path",
          "description" : "The room in which to send the event.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "receiptType",
          "in" : "path",
          "description" : "The type of receipt to send.",
          "required" : true,
          "type" : "string",
          "enum" : [ "[\"m.read\"]" ]
        }, {
          "name" : "eventId",
          "in" : "path",
          "description" : "The event ID to acknowledge up to.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The receipt was sent.",
            "schema" : {
              "$ref" : "#/definitions/EmptyResponse"
            }
          },
          "429" : {
            "description" : "This request was rate-limited."
          }
        }
      }
    },
    "/_matrix/client/r0/rooms/{roomId}/redact/{eventId}/{txnId}" : {
      "put" : {
        "tags" : [ "_matrixclientr0rooms" ],
        "summary" : "Strips all information out of an event which isn't critical to the integrity of the server-side representation of the room.",
        "description" : "This cannot be undone. Users may redact their own events, and any user with a power level greater than or equal to the redact power level of the room may redact events there.",
        "operationId" : "redact",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "roomId",
          "in" : "path",
          "description" : "The room from which to redact the event.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "eventId",
          "in" : "path",
          "description" : "The ID of the event to redact.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "txnId",
          "in" : "path",
          "description" : "The transaction ID for this event. Clients should generate a unique ID; it will be used by the server to ensure idempotency of requests.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The reason for the event being redacted.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/RedactRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "An ID for the redaction event.",
            "schema" : {
              "$ref" : "#/definitions/SendEventResponse"
            }
          }
        }
      }
    },
    "/_matrix/client/r0/rooms/{roomId}/report/{eventId}" : {
      "post" : {
        "tags" : [ "_matrixclientr0" ],
        "summary" : "Reports an event as inappropriate to the server, which may then notify the appropriate people.",
        "description" : "",
        "operationId" : "report",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "roomId",
          "in" : "path",
          "description" : "The room in which the event being reported is located.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "eventId",
          "in" : "path",
          "description" : "The event to report.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "JSON body request.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ReportRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The event has been reported successfully.",
            "schema" : {
              "$ref" : "#/definitions/EmptyResponse"
            }
          }
        }
      }
    },
    "/_matrix/client/r0/rooms/{roomId}/send/{eventType}/{txnId}" : {
      "put" : {
        "tags" : [ "_matrixclientr0rooms" ],
        "summary" : "This endpoint is used to send a message event to a room.",
        "description" : "Message events allow access to historical events and pagination, making them suited for \"once-off\" activity in a room. The body of the request should be the content object of the event; the fields in this object will vary depending on the type of event. See Room Events for the m. event specification.",
        "operationId" : "sendEvent",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "roomId",
          "in" : "path",
          "description" : "The room to send the event to.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "eventType",
          "in" : "path",
          "description" : "The type of event to send.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "txnId",
          "in" : "path",
          "description" : "The transaction ID for this event. Clients should generate an ID unique across requests with the same access token; it will be used by the server to ensure idempotency of requests.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Event",
          "required" : false,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "An ID for the sent event.",
            "schema" : {
              "$ref" : "#/definitions/SendEventResponse"
            }
          }
        }
      }
    },
    "/_matrix/client/r0/rooms/{roomId}/state" : {
      "get" : {
        "tags" : [ "_matrixclientr0rooms" ],
        "summary" : "Get the state events for the current state of a room.",
        "description" : "",
        "operationId" : "eventsForRoom",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "roomId",
          "in" : "path",
          "description" : "The room to look up the state for.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The current state of the room.",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "object"
              }
            }
          },
          "403" : {
            "description" : "You aren't a member of the room and weren't previously a member of the room."
          }
        }
      }
    },
    "/_matrix/client/r0/rooms/{roomId}/state/{eventType}" : {
      "get" : {
        "tags" : [ "_matrixclientr0rooms" ],
        "summary" : "Looks up the contents of a state event in a room. If the user is joined to the room then the state is taken from the current state of the room. If the user has left the room then the state is taken from the state of the room when they left.",
        "description" : "This looks up the state event with the empty state key.",
        "operationId" : "eventsForRoomWithType",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "roomId",
          "in" : "path",
          "description" : "The room to look up the state in.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "eventType",
          "in" : "path",
          "description" : "The type of state to look up.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The content of the state event.",
            "schema" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          },
          "403" : {
            "description" : "You aren't a member of the room and weren't previously a member of the room."
          },
          "404" : {
            "description" : "The room has no state with the given type or key."
          }
        }
      },
      "put" : {
        "tags" : [ "_matrixclientr0rooms" ],
        "summary" : "State events can be sent using this endpoint.",
        "description" : "This endpoint is equivalent to calling /rooms/{roomId}/state/{eventType}/{stateKey} with an empty stateKey. Previous state events with matching (roomId) and (eventType), and empty (stateKey), will be overwritten. Requests to this endpoint cannot use transaction IDs like other PUT paths because they cannot be differentiated from the state_key. Furthermore, POST is unsupported on state paths. The body of the request should be the content object of the event; the fields in this object will vary depending on the type of event. See Room Events for the m.event specification.",
        "operationId" : "sendEventWithType",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "roomId",
          "in" : "path",
          "description" : "The room to set the state in.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "eventType",
          "in" : "path",
          "description" : "The type of event to send.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Event",
          "required" : false,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "An ID for the sent event.",
            "schema" : {
              "$ref" : "#/definitions/SendEventResponse"
            }
          }
        }
      }
    },
    "/_matrix/client/r0/rooms/{roomId}/state/{eventType}/{stateKey}" : {
      "get" : {
        "tags" : [ "_matrixclientr0rooms" ],
        "summary" : "Looks up the contents of a state event in a room. If the user is joined to the room then the state is taken from the current state of the room. If the user has left the room then the state is taken from the state of the room when they left.",
        "description" : "",
        "operationId" : "eventsForRoomWithTypeAndState",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "roomId",
          "in" : "path",
          "description" : "The room to look up the state in.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "eventType",
          "in" : "path",
          "description" : "The type of state to look up.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "stateKey",
          "in" : "path",
          "description" : "The key of the state to look up.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The content of the state event.",
            "schema" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          },
          "403" : {
            "description" : "You aren't a member of the room and weren't previously a member of the room."
          },
          "404" : {
            "description" : "The room has no state with the given type or key."
          }
        }
      },
      "put" : {
        "tags" : [ "_matrixclientr0rooms" ],
        "summary" : "State events can be sent using this endpoint.",
        "description" : "These events will be overwritten if (room id), (event type) and (state key) all match. Requests to this endpoint cannot use transaction IDs like other PUT paths because they cannot be differentiated from the state_key. Furthermore, POST is unsupported on state paths. The body of the request should be the content object of the event; the fields in this object will vary depending on the type of event.See Room Events for the m.event specification.",
        "operationId" : "sendEventWithTypeAndState",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "roomId",
          "in" : "path",
          "description" : "The room to set the state in.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "eventType",
          "in" : "path",
          "description" : "The type of event to send.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "stateKey",
          "in" : "path",
          "description" : "The state_key for the state to send. Defaults to the empty string.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "event",
          "required" : false,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "An ID for the sent event.",
            "schema" : {
              "$ref" : "#/definitions/SendEventResponse"
            }
          }
        }
      }
    },
    "/_matrix/client/r0/rooms/{roomId}/typing/{userId}" : {
      "put" : {
        "tags" : [ "_matrixclientr0rooms" ],
        "summary" : "This tells the server that the user is typing for the next N milliseconds where N is the value specified in the timeout key. Alternatively, if typing is false, it tells the server that the user has stopped typing.",
        "description" : "",
        "operationId" : "typing",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "roomId",
          "in" : "path",
          "description" : "The user who has started to type.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "userId",
          "in" : "path",
          "description" : "The room in which the user is typing.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "JSON body request.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/TypingRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The new typing state was set.",
            "schema" : {
              "$ref" : "#/definitions/EmptyResponse"
            }
          },
          "429" : {
            "description" : "This request was rate-limited."
          }
        }
      }
    },
    "/_matrix/client/r0/rooms/{roomId}/unban" : {
      "post" : {
        "tags" : [ "_matrixclientr0" ],
        "summary" : "Unban a user from the room. This allows them to be invited to the room, and join if they would otherwise be allowed to join according to its join rules.",
        "description" : "",
        "operationId" : "unban",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "roomId",
          "in" : "path",
          "description" : "The room identifier (not alias) from which the user should be unbanned.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "JSON body request.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/KickRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The user has been unbanned from the room.",
            "schema" : {
              "$ref" : "#/definitions/EmptyResponse"
            }
          },
          "403" : {
            "description" : "You do not have permission to unban the user from the room. A meaningful errcode and description error text will be returned."
          }
        }
      }
    },
    "/_matrix/client/r0/search" : {
      "post" : {
        "tags" : [ "_matrixclientr0" ],
        "summary" : "Performs a full text search across different categories.",
        "description" : "",
        "operationId" : "search",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "next_batch",
          "in" : "query",
          "description" : "The point to return events from. If given, this should be a next_batch result from a previous call to this endpoint.",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "JSON body request",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/SearchRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Results of the search.",
            "schema" : {
              "$ref" : "#/definitions/SearchResponse"
            }
          },
          "400" : {
            "description" : "Part of the request was invalid."
          },
          "429" : {
            "description" : "This request was rate-limited."
          }
        }
      }
    },
    "/_matrix/client/r0/sendToDevice/{eventType}/{txnId}" : {
      "put" : {
        "tags" : [ "_matrixclientr0sendToDevice" ],
        "summary" : "This endpoint is used to send send-to-device events to a set of client devices.",
        "description" : "",
        "operationId" : "send",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "eventType",
          "in" : "path",
          "description" : "The type of event to send.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "txnId",
          "in" : "path",
          "description" : "The transaction ID for this event. Clients should generate an ID unique across requests with the same access token; it will be used by the server to ensure idempotency of requests.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "JSON resuest body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/SendToDeviceRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The message was successfully sent.",
            "schema" : {
              "$ref" : "#/definitions/EmptyResponse"
            }
          }
        }
      }
    },
    "/_matrix/client/r0/sync" : {
      "get" : {
        "tags" : [ "To read events, the intended flow of operation is for clients to first call the sync API without a since parameter. This returns the most recent message events for each room, as well as the state of the room at the start of the returned timeline. The response also includes a next_batch field, which should be used as the value of the since parameter in the next call to sync. Finally, the response includes, for each room, a prev_batch field, which can be passed as a start parameter to the rooms&lt;room_id&gt;messages API to retrieve earlier messages." ],
        "summary" : "Synchronise the client's state with the latest state on the server. Clients use this API when they first log in to get an initial snapshot of the state on the server, and then continue to call this API to get incremental deltas to the state, and to receive new messages.",
        "description" : "",
        "operationId" : "sync",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "The ID of a filter created using the filter API or a filter JSON object encoded as a string. The server will detect whether it is an ID or a JSON object by whether the first character is a \"{\" open brace. Passing the JSON inline is best suited to one off requests. Creating a filter using the filter API is recommended for clients that reuse the same filter multiple times, for example in long poll requests.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "since",
          "in" : "query",
          "description" : "A point in time to continue a sync from.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "full_state",
          "in" : "query",
          "description" : "Controls whether to include the full state for all rooms the user is a member of.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "set_presence",
          "in" : "query",
          "description" : "Controls whether the client is automatically marked as online by polling this API. If this parameter is omitted then the client is automatically marked as online when it uses this API. Otherwise if the parameter is set to \"offline\" then the client is not marked as being online when it uses this API.",
          "required" : false,
          "type" : "string",
          "enum" : [ "[\"offline\"]" ]
        }, {
          "name" : "timeout",
          "in" : "query",
          "description" : "The maximum time to wait, in milliseconds, before returning this request. If no events (or other data) become available before this time elapses, the server will return a response with empty fields.",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "The initial snapshot or delta for the client to use to update their state.",
            "schema" : {
              "$ref" : "#/definitions/SyncResponse"
            }
          }
        }
      }
    },
    "/_matrix/client/r0/user/{userId}/account_data/{type}" : {
      "put" : {
        "tags" : [ "_matrixclientr0user" ],
        "summary" : "Set some account_data for the client.",
        "description" : "This config is only visible to the user that set the account_data. The config will be synced to clients in the top-level account_data.",
        "operationId" : "addConfig",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The id of the user to set account_data for. The access token must be authorized to make requests for this user id.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "type",
          "in" : "path",
          "description" : "The event type of the account_data to set. Custom types should be namespaced to avoid clashes.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Account data",
          "required" : false,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The account_data was successfully added.",
            "schema" : {
              "$ref" : "#/definitions/EmptyResponse"
            }
          }
        }
      }
    },
    "/_matrix/client/r0/user/{userId}/filter" : {
      "post" : {
        "tags" : [ "_matrixclientr0user" ],
        "summary" : "Ploads a new filter definition to the homeserver.",
        "description" : "Returns a filter ID that may be used in future requests to restrict which events are returned to the client.",
        "operationId" : "uploadFilter",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The id of the user uploading the filter. The access token must be authorized to make requests for this user id.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "JSON body parameters",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/FilterData"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The filter was created.",
            "schema" : {
              "$ref" : "#/definitions/FilterResponse"
            }
          }
        }
      }
    },
    "/_matrix/client/r0/user/{userId}/filter/{filterId}" : {
      "get" : {
        "tags" : [ "_matrixclientr0user" ],
        "summary" : "Download a filter.",
        "description" : "",
        "operationId" : "getFilter",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The user ID to download a filter for.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "filterId",
          "in" : "path",
          "description" : "The filter ID to download.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The filter definition.",
            "schema" : {
              "$ref" : "#/definitions/FilterData"
            }
          },
          "404" : {
            "description" : "Unknown filter."
          }
        }
      }
    },
    "/_matrix/client/r0/user/{userId}/rooms/{roomId}/account_data/{type}" : {
      "put" : {
        "tags" : [ "_matrixclientr0user" ],
        "summary" : "Set some account_data for the client on a given room.",
        "description" : "This config is only visible to the user that set the account_data. The config will be synced to clients in the per-room account_data.",
        "operationId" : "addConfig",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The id of the user to set account_data for. The access token must be authorized to make requests for this user id.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "roomId",
          "in" : "path",
          "description" : "The id of the room to set account_data on.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "type",
          "in" : "path",
          "description" : "The event type of the account_data to set. Custom types should be namespaced to avoid clashes.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Account data",
          "required" : false,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The account_data was successfully added.",
            "schema" : {
              "$ref" : "#/definitions/EmptyResponse"
            }
          }
        }
      }
    },
    "/_matrix/client/r0/user/{userId}/rooms/{roomId}/tags" : {
      "get" : {
        "tags" : [ "_matrixclientr0user" ],
        "summary" : "List the tags set by a user on a room.",
        "description" : "",
        "operationId" : "showTags",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The id of the user to get tags for. The access token must be authorized to make requests for this user id.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "roomId",
          "in" : "path",
          "description" : "The id of the room to get tags for.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The list of tags for the user for the room.",
            "schema" : {
              "$ref" : "#/definitions/Tags"
            }
          }
        }
      }
    },
    "/_matrix/client/r0/user/{userId}/rooms/{roomId}/tags/{tag}" : {
      "put" : {
        "tags" : [ "_matrixclientr0user" ],
        "summary" : "Add a tag to the room.",
        "description" : "",
        "operationId" : "addTag",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The id of the user to add a tag for. The access token must be authorized to make requests for this user id.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "roomId",
          "in" : "path",
          "description" : "The id of the room to add a tag to.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "tag",
          "in" : "path",
          "description" : "The tag to add.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Tag data.",
          "required" : false,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The tag was successfully added.",
            "schema" : {
              "$ref" : "#/definitions/EmptyResponse"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "_matrixclientr0user" ],
        "summary" : "Remove a tag from the room.",
        "description" : "",
        "operationId" : "deleteTag",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The id of the user to remove a tag for. The access token must be authorized to make requests for this user id.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "roomId",
          "in" : "path",
          "description" : "The id of the room to remove a tag from.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "tag",
          "in" : "path",
          "description" : "The tag to remove.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The tag was successfully removed.",
            "schema" : {
              "$ref" : "#/definitions/EmptyResponse"
            }
          }
        }
      }
    },
    "/_matrix/client/r0/user_directory/search" : {
      "post" : {
        "tags" : [ "_matrixclientr0user_directory" ],
        "summary" : "This API performs a server-side search over all users registered on the server. It searches user ID and displayname case-insensitively for users that you share a room with or that are in public rooms.",
        "description" : "",
        "operationId" : "search",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "JSON body request.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/SearchRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The results of the search.",
            "schema" : {
              "$ref" : "#/definitions/SearchResponse"
            }
          },
          "429" : {
            "description" : "This request was rate-limited."
          }
        }
      }
    },
    "/_matrix/client/r0/voip/turnServer" : {
      "get" : {
        "tags" : [ "_matrixclientr0voip" ],
        "summary" : "This API provides credentials for the client to use when initiating calls.",
        "description" : "",
        "operationId" : "turnServer",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "The TURN server credentials.",
            "schema" : {
              "$ref" : "#/definitions/VoipResponse"
            }
          },
          "429" : {
            "description" : "This request was rate-limited."
          }
        }
      }
    },
    "/_matrix/client/versions" : {
      "get" : {
        "tags" : [ "_matrixclientversions" ],
        "summary" : "Gets the versions of the specification supported by the server.",
        "description" : "",
        "operationId" : "versions",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "The versions supported by the server.",
            "schema" : {
              "$ref" : "#/definitions/VersionsResponse"
            }
          }
        }
      }
    },
    "/_matrix/media/r0/download/{serverName}/{mediaId}" : {
      "get" : {
        "tags" : [ "_matrixmediar0" ],
        "summary" : "Download content from the content repository.",
        "description" : "",
        "operationId" : "download",
        "parameters" : [ {
          "name" : "serverName",
          "in" : "path",
          "description" : "The server name from the mxc:// URI (the authoritory component).",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "mediaId",
          "in" : "path",
          "description" : "The media ID from the mxc:// URI (the path component).",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The content that was previously uploaded.",
            "schema" : {
              "$ref" : "#/definitions/OutputStream"
            }
          },
          "429" : {
            "description" : "This request was rate-limited."
          }
        }
      }
    },
    "/_matrix/media/r0/download/{serverName}/{mediaId}/{fileName}" : {
      "get" : {
        "tags" : [ "_matrixmediar0" ],
        "summary" : "Download content from the content repository as a given filename.",
        "description" : "",
        "operationId" : "download",
        "parameters" : [ {
          "name" : "serverName",
          "in" : "path",
          "description" : "he server name from the mxc:// URI (the authoritory component).",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "mediaId",
          "in" : "path",
          "description" : "The media ID from the mxc:// URI (the path component).",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fileName",
          "in" : "path",
          "description" : "The filename to give in the Content-Disposition.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The content that was previously uploaded.",
            "schema" : {
              "$ref" : "#/definitions/OutputStream"
            }
          },
          "429" : {
            "description" : "This request was rate-limited."
          }
        }
      }
    },
    "/_matrix/media/r0/preview_url" : {
      "get" : {
        "tags" : [ "_matrixmediar0" ],
        "summary" : "Get information about a PATH for a client.",
        "description" : "",
        "operationId" : "previewUrl",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "url",
          "in" : "query",
          "description" : "The PATH to get a preview of.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "ts",
          "in" : "query",
          "description" : "The preferred point in time to return a preview for. The server may return a newer version if it does not have the requested version available.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The content that was previously uploaded.",
            "schema" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          },
          "429" : {
            "description" : "This request was rate-limited."
          }
        }
      }
    },
    "/_matrix/media/r0/thumbnail/{serverName}/{mediaId}" : {
      "get" : {
        "tags" : [ "_matrixmediar0" ],
        "summary" : "Download a thumbnail of the content from the content repository.",
        "description" : "",
        "operationId" : "thumbnail",
        "parameters" : [ {
          "name" : "serverName",
          "in" : "path",
          "description" : "The server name from the mxc:// URI (the authoritory component).",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "mediaId",
          "in" : "path",
          "description" : "The media ID from the mxc:// URI (the path component)",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "width",
          "in" : "query",
          "description" : "he desired width of the thumbnail. The actual thumbnail may not match the size specified.",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "height",
          "in" : "query",
          "description" : "The desired height of the thumbnail. The actual thumbnail may not match the size specified.",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "method",
          "in" : "query",
          "description" : "The desired resizing method.",
          "required" : false,
          "type" : "string",
          "enum" : [ "['crop'", "'scale']" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "The content that was previously uploaded.",
            "schema" : {
              "$ref" : "#/definitions/OutputStream"
            }
          },
          "429" : {
            "description" : "This request was rate-limited."
          }
        }
      }
    },
    "/_matrix/media/r0/upload" : {
      "post" : {
        "tags" : [ "_matrixmediar0" ],
        "summary" : "Upload some content to the content repository.",
        "description" : "",
        "operationId" : "upload",
        "consumes" : [ "multipart/form-data" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The file content",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/InputStream"
          }
        }, {
          "name" : "filename",
          "in" : "query",
          "description" : "The name of the file being uploaded.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Content-Type",
          "in" : "header",
          "description" : "The content type of the file being uploaded",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The MXC URI for the uploaded content.",
            "schema" : {
              "$ref" : "#/definitions/ContentUri"
            }
          },
          "429" : {
            "description" : "This request was rate-limited."
          }
        }
      }
    },
    "/_matrix/static/client/login" : {
      "get" : {
        "tags" : [ "_matrix" ],
        "summary" : "Fallback login.",
        "description" : "",
        "operationId" : "login",
        "produces" : [ "text/html" ],
        "responses" : {
          "200" : {
            "description" : "Login page for the fallback login.",
            "schema" : {
              "type" : "string"
            }
          }
        }
      }
    }
  },
  "definitions" : {
    "AccountData" : {
      "type" : "object",
      "properties" : {
        "events" : {
          "type" : "array",
          "description" : "List of events.",
          "items" : {
            "$ref" : "#/definitions/Event"
          }
        }
      },
      "description" : "Account data."
    },
    "AdminResponse" : {
      "type" : "object",
      "properties" : {
        "devices" : {
          "type" : "object",
          "description" : "Each key is an identitfier for one of the user's devices",
          "additionalProperties" : {
            "$ref" : "#/definitions/DeviceInfo"
          }
        },
        "user_id" : {
          "type" : "string",
          "description" : "he Matrix user ID of the user."
        }
      },
      "description" : "Response for gets information about a particular user."
    },
    "AuthenticationData" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "Auth type."
        },
        "session" : {
          "type" : "string",
          "description" : "Session."
        },
        "user" : {
          "type" : "string",
          "description" : "user id."
        },
        "password" : {
          "type" : "string",
          "description" : "password."
        },
        "medium" : {
          "type" : "string",
          "description" : "3pid address type."
        },
        "address" : {
          "type" : "string",
          "description" : "3pid address."
        },
        "response" : {
          "type" : "string",
          "description" : "Captcha response."
        },
        "token" : {
          "type" : "string",
          "description" : "Auth token."
        },
        "uri" : {
          "type" : "string",
          "description" : "OAuth uri."
        },
        "threepidCreds" : {
          "type" : "array",
          "description" : "3pids credentials.",
          "items" : {
            "$ref" : "#/definitions/ThreePidCred"
          }
        },
        "txn_id" : {
          "type" : "string",
          "description" : "transaction id."
        }
      },
      "description" : "Authentication Data."
    },
    "AvailableResponse" : {
      "type" : "object",
      "properties" : {
        "available" : {
          "type" : "boolean",
          "description" : "A flag to indicate that the username is available. This should always be true when the server replies with 200 OK."
        }
      },
      "description" : "JSON response for available api"
    },
    "AvatarUrl" : {
      "type" : "object",
      "properties" : {
        "avatar_url" : {
          "type" : "string",
          "description" : "The new avatar URL for this user."
        }
      },
      "description" : "JSON body request for profile api."
    },
    "ChangesResponse" : {
      "type" : "object",
      "properties" : {
        "changed" : {
          "type" : "array",
          "description" : "The Matrix User IDs of all users who updated their device identity keys.",
          "items" : {
            "type" : "string"
          }
        },
        "left" : {
          "type" : "array",
          "description" : "The Matrix User IDs of all users who may have left all the end-to-end encrypted rooms they previously shared with the user.",
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "The list of users who updated their devices."
    },
    "CharSequence" : {
      "type" : "object"
    },
    "ClaimRequest" : {
      "type" : "object",
      "required" : [ "one_time_keys" ],
      "properties" : {
        "timeout" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The time (in milliseconds) to wait when downloading keys from remote servers. 10 seconds is the recommended default."
        },
        "one_time_keys" : {
          "type" : "object",
          "description" : "The keys to be claimed. A map from user ID, to a map from device ID to algorithm name.",
          "additionalProperties" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        }
      },
      "description" : "JSON body parameters for Claims one-time keys for use in pre-key messages."
    },
    "ClaimResponse" : {
      "type" : "object",
      "properties" : {
        "failures" : {
          "type" : "object",
          "description" : "If any remote homeservers could not be reached, they are recorded here. The names of the properties are the names of the unreachable servers.",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "one_time_keys" : {
          "type" : "object",
          "description" : "One-time keys for the queried devices. A map from user ID, to a map from &lt;algorithm&gt;:&lt;key_id&gt; to the key object.",
          "additionalProperties" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          }
        }
      },
      "description" : "Claim response format."
    },
    "ConnectionInfo" : {
      "type" : "object",
      "properties" : {
        "ip" : {
          "type" : "string",
          "description" : "Most recently seen IP address of the session"
        },
        "last_seen" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unix timestamp that the session was last active"
        },
        "user_agent" : {
          "type" : "string",
          "description" : "User agent string last seen in the session"
        }
      },
      "description" : "Connection info."
    },
    "ContentUri" : {
      "type" : "object",
      "properties" : {
        "content_uri" : {
          "type" : "string",
          "description" : "MXC URI."
        }
      },
      "description" : "The MXC URI for the uploaded content"
    },
    "CreateRoomRequest" : {
      "type" : "object",
      "properties" : {
        "visibility" : {
          "type" : "string",
          "description" : "A public visibility indicates that the room will be shown in the published room list. A private visibility will hide the room from the published room list. Rooms default to private visibility if this key is not included. NB: This should not be confused with join_rules which also uses the word public.",
          "enum" : [ "[\"public\"", "\"private\"]" ]
        },
        "name" : {
          "type" : "string",
          "description" : "If this is included, an m.room.name event will be sent into the room to indicate the name of the room. See Room Events for more information on m.room.name."
        },
        "topic" : {
          "type" : "string",
          "description" : "If this is included, an m.room.topic event will be sent into the room to indicate the topic for the room. See Room Events for more information on m.room.topic."
        },
        "invite" : {
          "type" : "array",
          "description" : "A list of user IDs to invite to the room. This will tell the server to invite everyone in the list to the newly created room.",
          "items" : {
            "type" : "string"
          }
        },
        "preset" : {
          "type" : "string",
          "description" : "Convenience parameter for setting various default state events based on a preset.",
          "enum" : [ "[\"private_chat\"", "\"public_chat\"", "\"trusted_private_chat\"]" ]
        },
        "direct" : {
          "type" : "boolean"
        },
        "room_alias_name" : {
          "type" : "string",
          "description" : "The desired room alias local part. If this is included, a room alias will be created and mapped to the newly created room. The alias will belong on the same homeserver which created the room. For example, if this was set to \"foo\" and sent to the homeserver \"example.com\" the complete room alias would be #foo:example.com."
        },
        "invite_3pid" : {
          "type" : "array",
          "description" : "A list of objects representing third party IDs to invite into the room.",
          "items" : {
            "$ref" : "#/definitions/Invite3pid"
          }
        },
        "creation_content" : {
          "type" : "object",
          "description" : "Extra keys to be added to the content of the m.room.create. The server will clobber the following keys: creator. Future versions of the specification may allow the server to clobber other keys."
        },
        "initial_event" : {
          "type" : "array",
          "description" : "A list of state events to set in the new room. This allows the user to override the default state events set in the new room. The expected format of the state events are an object with type, state_key and content keys set.",
          "items" : {
            "$ref" : "#/definitions/Event"
          }
        },
        "is_direct" : {
          "type" : "boolean",
          "description" : "This flag makes the server set the is_direct flag on the m.room.member events sent to the users in invite and invite_3pid. See Direct Messaging for more information."
        },
        "guest_can_join" : {
          "type" : "boolean",
          "description" : "Allows guests to join the room. See Guest Access for more information."
        }
      },
      "description" : "JSON body request for creation api."
    },
    "DeactivateRequest" : {
      "type" : "object",
      "properties" : {
        "auth" : {
          "description" : "Additional authentication information for the user-interactive authentication API.",
          "$ref" : "#/definitions/AuthenticationData"
        }
      },
      "description" : "Request for deactivate the user's account, removing all ability for the user to login again"
    },
    "Device" : {
      "type" : "object",
      "required" : [ "device_id" ],
      "properties" : {
        "device_id" : {
          "type" : "string",
          "description" : "Identifier of this device."
        },
        "display_name" : {
          "type" : "string",
          "description" : "Display name set by the user for this device. Absent if no name has been set."
        },
        "last_seen_ip" : {
          "type" : "string",
          "description" : "The IP address where this device was last seen. (May be a few minutes out of date, for efficiency reasons)"
        },
        "last_seen_ts" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The timestamp (in milliseconds since the unix epoch) when this devices was last seen. (May be a few minutes out of date, for efficiency reasons)."
        }
      },
      "description" : "Device"
    },
    "DeviceDeleteRequest" : {
      "type" : "object",
      "properties" : {
        "auth" : {
          "description" : "Authentication information.",
          "$ref" : "#/definitions/AuthenticationData"
        }
      },
      "description" : "Additional authentication information for the user-interactive authentication API."
    },
    "DeviceInfo" : {
      "type" : "object",
      "properties" : {
        "sessions" : {
          "type" : "array",
          "description" : "A user's sessions (i.e. what they did with an access token from one login)",
          "items" : {
            "$ref" : "#/definitions/SessionInfo"
          }
        }
      },
      "description" : "Device info"
    },
    "DeviceKeys" : {
      "type" : "object",
      "required" : [ "algorithms", "device_id", "keys", "signatures", "user_id" ],
      "properties" : {
        "algorithms" : {
          "type" : "array",
          "description" : "The encryption algorithms supported by this device.",
          "items" : {
            "type" : "string"
          }
        },
        "keys" : {
          "type" : "object",
          "description" : "Public identity keys. The names of the properties should be in the format &lt;algorithm&gt;:&lt;device_id&gt;. The keys themselves should be encoded as specified by the key algorithm.",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "signatures" : {
          "type" : "object",
          "description" : "Signatures for the device key object. A map from user ID, to a map from (algorithm):(device_id) to the signature.",
          "additionalProperties" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        },
        "unsignedDeviceInfo" : {
          "description" : "Additional data added to the device key information by intermediate servers, and not covered by the signatures.",
          "$ref" : "#/definitions/UnsignedDeviceInfo"
        },
        "user_id" : {
          "type" : "string",
          "description" : "The ID of the user the device belongs to. Must match the user ID used when logging in."
        },
        "device_id" : {
          "type" : "string",
          "description" : "The ID of the device these keys belong to. Must match the device ID used when logging in."
        }
      },
      "description" : "Device keys."
    },
    "DeviceLists" : {
      "type" : "object",
      "properties" : {
        "changed" : {
          "type" : "array",
          "description" : "List of users who have updated their device identity keys since the previous sync response.",
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "Device lists."
    },
    "DeviceUpdateRequest" : {
      "type" : "object",
      "properties" : {
        "display_name" : {
          "type" : "string",
          "description" : "The new display name."
        }
      },
      "description" : "The new display name for this device. If not given, the display name is unchanged."
    },
    "DevicesDeleteRequest" : {
      "type" : "object",
      "required" : [ "devices" ],
      "properties" : {
        "devices" : {
          "type" : "array",
          "description" : "The list of device IDs to delete.",
          "items" : {
            "type" : "string"
          }
        },
        "auth" : {
          "description" : "Additional authentication information for the user-interactive authentication API.",
          "$ref" : "#/definitions/AuthenticationData"
        }
      },
      "description" : "JSON body request for bulk devices delete."
    },
    "DevicesResponse" : {
      "type" : "object",
      "properties" : {
        "devices" : {
          "type" : "array",
          "description" : "A list of all registered devices for this user.",
          "items" : {
            "$ref" : "#/definitions/Device"
          }
        }
      },
      "description" : "Information about all devices for the current user."
    },
    "DisplayName" : {
      "type" : "object",
      "properties" : {
        "displayname" : {
          "type" : "string",
          "description" : "The new display name for this user."
        }
      },
      "description" : "JSON body request for profile api."
    },
    "EmptyResponse" : {
      "type" : "object",
      "description" : "Empty response"
    },
    "Ephemeral" : {
      "type" : "object",
      "properties" : {
        "events" : {
          "type" : "array",
          "description" : "List of events.",
          "items" : {
            "$ref" : "#/definitions/Event"
          }
        }
      },
      "description" : "Ephemeral."
    },
    "Event" : {
      "type" : "object",
      "required" : [ "event_id", "membership", "origin_server_ts", "room_id", "sender", "state_key", "type" ],
      "properties" : {
        "content" : {
          "type" : "object",
          "description" : "The fields in this object will vary depending on the type of event. When interacting with the REST API, this is the HTTP body.",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "type" : {
          "type" : "string",
          "description" : "The type of event. This SHOULD be namespaced similar to Java package naming conventions."
        },
        "sender" : {
          "type" : "string",
          "description" : "Contains the fully-qualified ID of the user who sent this event."
        },
        "unsigned" : {
          "description" : "Contains optional extra information about the event.",
          "$ref" : "#/definitions/Unsigned"
        },
        "membership" : {
          "type" : "string",
          "description" : "The membership state of the user.",
          "enum" : [ "[\"invite\"", "\"join\"", "\"knock\"", "\"leave\"", "\"ban\"]" ]
        },
        "event_id" : {
          "type" : "string",
          "description" : "The globally unique event identifier."
        },
        "room_id" : {
          "type" : "string",
          "description" : "The ID of the room associated with this event."
        },
        "origin_server_ts" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Timestamp in milliseconds on originating homeserver when this event was sent."
        },
        "prev_content" : {
          "type" : "object",
          "description" : "The previous content for this event. If there is no previous content, this key will be missing.",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "state_key" : {
          "type" : "string",
          "description" : " A unique key which defines the overwriting semantics for this piece of room state. This value is often a zero-length string. The presence of this key makes this event a State Event. The key MUST NOT start with '_'."
        },
        "invite_room_state" : {
          "type" : "array",
          "description" : "This contains an array of StrippedState Events. These events provide information on a subset of state events such as the room name.",
          "items" : {
            "$ref" : "#/definitions/StrippedState"
          }
        }
      },
      "description" : "Event."
    },
    "EventContext" : {
      "type" : "object",
      "properties" : {
        "before_limit" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "How many events before the result are returned."
        },
        "after_limit" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "How many events after the result are returned."
        },
        "include_profile" : {
          "type" : "boolean",
          "description" : "Requests that the server returns the historic profile information for the users that sent the events that were returned."
        }
      },
      "description" : "Event context."
    },
    "EventContextResponse" : {
      "type" : "object",
      "properties" : {
        "start" : {
          "type" : "string",
          "description" : "A token that can be used to paginate backwards with."
        },
        "end" : {
          "type" : "string",
          "description" : "A token that can be used to paginate forwards with."
        },
        "event" : {
          "description" : "Details of the requested event.",
          "$ref" : "#/definitions/Event"
        },
        "state" : {
          "description" : "The state of the room at the last event returned.",
          "$ref" : "#/definitions/Event"
        },
        "events_before" : {
          "type" : "array",
          "description" : "A list of room events that happened just before the requested event, in reverse-chronological order.",
          "items" : {
            "$ref" : "#/definitions/Event"
          }
        },
        "events_after" : {
          "type" : "array",
          "description" : "A list of room events that happened just after the requested event, in chronological order.",
          "items" : {
            "$ref" : "#/definitions/Event"
          }
        }
      },
      "description" : "Events that happened just before and after the specified event."
    },
    "Filter" : {
      "type" : "object",
      "properties" : {
        "limit" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The maximum number of events to return."
        },
        "senders" : {
          "type" : "array",
          "description" : "A list of senders IDs to include. If this list is absent then all senders are included.",
          "items" : {
            "type" : "string"
          }
        },
        "types" : {
          "type" : "array",
          "description" : "A list of event types to include. If this list is absent then all event types are included. A '*' can be used as a wildcard to match any sequence of characters.",
          "items" : {
            "type" : "string"
          }
        },
        "not_senders" : {
          "type" : "array",
          "description" : "A list of sender IDs to exclude. If this list is absent then no senders are excluded. A matching sender will be excluded even if it is listed in the 'senders' filter.",
          "items" : {
            "type" : "string"
          }
        },
        "not_types" : {
          "type" : "array",
          "description" : "A list of event types to exclude. If this list is absent then no event types are excluded. A matching type will be excluded even if it is listed in the 'types' filter. A '*' can be used as a wildcard to match any sequence of characters.",
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "Filter."
    },
    "FilterData" : {
      "type" : "object",
      "properties" : {
        "presence" : {
          "description" : "The presence updates to include.",
          "$ref" : "#/definitions/Filter"
        },
        "room" : {
          "description" : "Filters to be applied to room data.",
          "$ref" : "#/definitions/Room filter."
        },
        "event_fields" : {
          "type" : "array",
          "description" : "List of event fields to include. If this list is absent then all fields are included. The entries may include '.' charaters to indicate sub-fields. So ['content.body'] will include the 'body' field of the 'content' object. A literal '.' character in a field name may be escaped using a ''. A server may include more fields than were requested.",
          "items" : {
            "type" : "string"
          }
        },
        "event_format" : {
          "type" : "string",
          "description" : "The format to use for events. 'client' will return the events in a format suitable for clients. 'federation' will return the raw event as receieved over federation. The default is 'client'.",
          "enum" : [ "['client'", "'federation']" ]
        },
        "account_data" : {
          "description" : "The user account data that isn't associated with rooms to include.",
          "$ref" : "#/definitions/Filter"
        }
      },
      "description" : "JSON body request for filter api."
    },
    "FilterResponse" : {
      "type" : "object",
      "properties" : {
        "filter_id" : {
          "type" : "string"
        }
      }
    },
    "Group" : {
      "type" : "object",
      "properties" : {
        "key" : {
          "type" : "string",
          "description" : "Key that defines the group.",
          "enum" : [ "[\"room_id\"", "\"sender\"]" ]
        }
      },
      "description" : "Group."
    },
    "GroupValue" : {
      "type" : "object",
      "properties" : {
        "order" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Key that can be used to order different groups."
        },
        "results" : {
          "type" : "array",
          "description" : "Which results are in this group.",
          "items" : {
            "type" : "string"
          }
        },
        "next_batch" : {
          "type" : "string",
          "description" : "Token that can be used to get the next batch of results in the group, by passing as the next_batch parameter to the next call. If this field is absent, there are no more results in this group."
        }
      },
      "description" : "Group value."
    },
    "Groupings" : {
      "type" : "object",
      "properties" : {
        "group_by" : {
          "type" : "array",
          "description" : "List of groups to request.",
          "items" : {
            "$ref" : "#/definitions/Group"
          }
        }
      },
      "description" : "Groupings."
    },
    "InputStream" : {
      "type" : "object"
    },
    "Invite3pid" : {
      "type" : "object",
      "required" : [ "address", "id_server", "medium" ],
      "properties" : {
        "medium" : {
          "type" : "string",
          "description" : "The kind of address being passed in the address field, for example email."
        },
        "address" : {
          "type" : "string",
          "description" : "The invitee's third party identifier."
        },
        "id_server" : {
          "type" : "string",
          "description" : "The hostname+port of the identity server which should be used for third party identifier lookups."
        }
      },
      "description" : "Invite 3pid."
    },
    "InviteRequest" : {
      "type" : "object",
      "required" : [ "address", "id_server", "medium", "user_id" ],
      "properties" : {
        "medium" : {
          "type" : "string",
          "description" : "The kind of address being passed in the address field, for example email."
        },
        "address" : {
          "type" : "string",
          "description" : "The invitee's third party identifier."
        },
        "user_id" : {
          "type" : "string",
          "description" : "The fully qualified user ID of the invitee."
        },
        "id_server" : {
          "type" : "string",
          "description" : "The hostname+port of the identity server which should be used for third party identifier lookups."
        }
      },
      "description" : "Invite request."
    },
    "InviteState" : {
      "type" : "object",
      "properties" : {
        "events" : {
          "type" : "array",
          "description" : "List of events.",
          "items" : {
            "$ref" : "#/definitions/Event"
          }
        }
      },
      "description" : "Invite state."
    },
    "InvitedRoom" : {
      "type" : "object",
      "properties" : {
        "invite_state" : {
          "description" : "The state of a room that the user has been invited to. These state events may only have the sender, type, state_key and content keys present. These events do not replace any state that the client already has for the room, for example if the client has archived the room. Instead the client should keep two separate copies of the state: the one from the invite_state and one from the archived state.If the client joins the room then the current state will be given as a delta against the archived state not the invite_state.",
          "$ref" : "#/definitions/InviteState"
        }
      },
      "description" : "Invite room."
    },
    "JSON body request for presence api." : {
      "type" : "object",
      "properties" : {
        "invite" : {
          "type" : "array",
          "description" : "A list of user IDs to add to the list.",
          "items" : {
            "type" : "string"
          }
        },
        "drop" : {
          "type" : "array",
          "description" : "A list of user IDs to remove from the list.",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "JoinRequest" : {
      "type" : "object",
      "properties" : {
        "third_party_signed" : {
          "description" : "A signature of an m.third_party_invite token to prove that this user owns a third party identity which has been invited to the room.",
          "$ref" : "#/definitions/ThirdPartySigned"
        }
      },
      "description" : "Join request."
    },
    "JoinedMembersResponse" : {
      "type" : "object",
      "properties" : {
        "joined" : {
          "type" : "object",
          "description" : "A map from user ID to a RoomMember object.",
          "additionalProperties" : {
            "$ref" : "#/definitions/RoomMember"
          }
        }
      },
      "description" : "Joined room members."
    },
    "JoinedRoom" : {
      "type" : "object",
      "properties" : {
        "state" : {
          "description" : "Updates to the state, between the time indicated by the since parameter, and the start of the timeline (or all state up to the start of the timeline, if since is not given, or full_state is true).",
          "$ref" : "#/definitions/State"
        },
        "timeline" : {
          "description" : "The timeline of messages and state changes in the room.",
          "$ref" : "#/definitions/Timeline"
        },
        "ephemeral" : {
          "description" : "The ephemeral events in the room that aren't recorded in the timeline or state of the room. e.g. typing.",
          "$ref" : "#/definitions/Ephemeral"
        },
        "account_data" : {
          "description" : "The private data that this user has attached to this room.",
          "$ref" : "#/definitions/AccountData"
        },
        "unread_notifications" : {
          "description" : "Counts of unread notifications for this room.",
          "$ref" : "#/definitions/UnreadNotificationCounts"
        }
      },
      "description" : "Joined room."
    },
    "JoinedRoomsResponse" : {
      "type" : "object",
      "required" : [ "joined_rooms" ],
      "properties" : {
        "joined_rooms" : {
          "type" : "array",
          "description" : "The ID of each room in which the user has joined membership.",
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "JSON body resposnse with joined rooms."
    },
    "KickRequest" : {
      "type" : "object",
      "required" : [ "user_id" ],
      "properties" : {
        "reason" : {
          "type" : "string",
          "description" : "The reason the user has been kicked."
        },
        "user_id" : {
          "type" : "string",
          "description" : "The fully qualified user ID of the user being kicked."
        }
      },
      "description" : "Kick JSON body request."
    },
    "LeftRoom" : {
      "type" : "object",
      "properties" : {
        "state" : {
          "description" : "The state updates for the room up to the start of the timeline.",
          "$ref" : "#/definitions/State"
        },
        "timeline" : {
          "description" : "The timeline of messages and state changes in the room up to the point when the user left.",
          "$ref" : "#/definitions/Timeline"
        }
      },
      "description" : "Left room."
    },
    "LoginRequest" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "The login type being used",
          "enum" : [ "['m.login.password'", "'m.login.token']" ]
        },
        "user" : {
          "type" : "string",
          "description" : "he fully qualified user ID or just local part of the user ID, to log in."
        },
        "medium" : {
          "type" : "string",
          "description" : "When logging in using a third party identifier, the medium of the identifier. Must be 'email'."
        },
        "address" : {
          "type" : "string",
          "description" : "Third party identifier for the user"
        },
        "password" : {
          "description" : "Required when type is m.login.password. The user's password.",
          "$ref" : "#/definitions/CharSequence"
        },
        "token" : {
          "type" : "string",
          "description" : "Required when type is m.login.token. The login token"
        },
        "device_id" : {
          "type" : "string",
          "description" : "ID of the client device. If this does not correspond to a known client device, a new device will be created. The server will auto-generate a device_id if this is not specified"
        },
        "initial_device_display_name" : {
          "type" : "string",
          "description" : "A display name to assign to the newly-created device. Ignored if device_id corresponds to a known device."
        }
      },
      "description" : "Authenticates the user, and issues an access token they can use to authorize themself in subsequent requests"
    },
    "LoginResponse" : {
      "type" : "object",
      "properties" : {
        "user_id" : {
          "type" : "string",
          "description" : "The fully-qualified Matrix ID that has been registered."
        },
        "access_token" : {
          "type" : "string",
          "description" : "An access token for the account. This access token can then be used to authorize other requests."
        },
        "home_server" : {
          "type" : "string",
          "description" : "The hostname of the homeserver on which the account has been registered."
        },
        "device_id" : {
          "type" : "string",
          "description" : "ID of the logged-in device. Will be the same as the corresponding parameter in the request, if one was specified."
        }
      },
      "description" : "JSON body response for the login api"
    },
    "MembersResponse" : {
      "type" : "object",
      "properties" : {
        "chunk" : {
          "type" : "array",
          "description" : "Member events.",
          "items" : {
            "$ref" : "#/definitions/Event"
          }
        }
      },
      "description" : "The list of members for this room."
    },
    "Notification" : {
      "type" : "object",
      "required" : [ "actions", "event", "read", "room_id", "ts" ],
      "properties" : {
        "actions" : {
          "type" : "array",
          "description" : "The action(s) to perform when the conditions for this rule are met. See Push Rules: API.",
          "items" : {
            "type" : "object"
          }
        },
        "event" : {
          "description" : "The Event object for the event that triggered the notification.",
          "$ref" : "#/definitions/Event"
        },
        "read" : {
          "type" : "boolean",
          "description" : "Indicates whether the user has sent a read receipt indicating that they have read this message."
        },
        "ts" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The unix timestamp at which the event notification was sent, in milliseconds."
        },
        "profile_tag" : {
          "type" : "string",
          "description" : "The profile tag of the rule that matched this event."
        },
        "room_id" : {
          "type" : "string",
          "description" : "The ID of the room in which the event was posted."
        }
      },
      "description" : "Notification"
    },
    "NotificationResponse" : {
      "type" : "object",
      "required" : [ "notifications" ],
      "properties" : {
        "notifications" : {
          "type" : "array",
          "description" : "The list of events that triggered notifications.",
          "items" : {
            "$ref" : "#/definitions/Notification"
          }
        },
        "next_token" : {
          "type" : "string",
          "description" : "The token to supply in the from param of the next /notifications request in order to request more events. If this is absent, there are no more results."
        }
      },
      "description" : "JSON body response for push notifications."
    },
    "OutputStream" : {
      "type" : "object"
    },
    "Page" : {
      "type" : "object",
      "properties" : {
        "start" : {
          "type" : "string",
          "description" : "The token the pagination starts from. If dir=b this will be the token supplied in from."
        },
        "end" : {
          "type" : "string",
          "description" : "The token the pagination ends at. If dir=b this token should be used again to request even earlier events."
        },
        "chunk" : {
          "type" : "array",
          "description" : "A list of room events.",
          "items" : {
            "type" : "object"
          }
        }
      },
      "description" : "Pagination."
    },
    "PasswordRequest" : {
      "type" : "object",
      "required" : [ "new_password" ],
      "properties" : {
        "auth" : {
          "description" : "Additional authentication information for the user-interactive authentication API.",
          "$ref" : "#/definitions/AuthenticationData"
        },
        "new_password" : {
          "type" : "string"
        }
      },
      "description" : "Request for changes the password for an account on this homeserver."
    },
    "Presence" : {
      "type" : "object",
      "properties" : {
        "events" : {
          "type" : "array",
          "description" : "List of events.",
          "items" : {
            "$ref" : "#/definitions/Event"
          }
        }
      },
      "description" : "Presence."
    },
    "PresenceStatus" : {
      "type" : "object",
      "required" : [ "presence" ],
      "properties" : {
        "presence" : {
          "type" : "string",
          "description" : "The new presence state.",
          "enum" : [ "['online'", "'offline'", "'unavailable']" ]
        },
        "status_msg" : {
          "type" : "string",
          "description" : "The status message to attach to this state."
        },
        "last_active_ago" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The length of time in milliseconds since an action was performed by this user."
        },
        "currently_active" : {
          "type" : "boolean",
          "description" : "Whether the user is currently active."
        }
      },
      "description" : "SON body request for presence api."
    },
    "Profile" : {
      "type" : "object",
      "properties" : {
        "displayname" : {
          "type" : "string",
          "description" : "The user's display name if they have set one, otherwise not present."
        },
        "avatar_url" : {
          "type" : "string",
          "description" : "The user's avatar URL if they have set one, otherwise not present."
        }
      },
      "description" : "JSON body for profile api (profile)."
    },
    "PublicRoomsChunk" : {
      "type" : "object",
      "required" : [ "guest_can_join", "num_joined_members", "room_id", "world_readable" ],
      "properties" : {
        "aliases" : {
          "type" : "array",
          "description" : "Aliases of the room. May be empty.",
          "items" : {
            "type" : "string"
          }
        },
        "name" : {
          "type" : "string",
          "description" : "The name of the room, if any."
        },
        "topic" : {
          "type" : "string",
          "description" : "The topic of the room, if any."
        },
        "canonical_alias" : {
          "type" : "string",
          "description" : "The canonical alias of the room, if any."
        },
        "num_joined_members" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The number of members joined to the room."
        },
        "room_id" : {
          "type" : "string",
          "description" : "The ID of the room."
        },
        "world_readable" : {
          "type" : "boolean",
          "description" : "Whether the room may be viewed by guest users without joining."
        },
        "guest_can_join" : {
          "type" : "boolean",
          "description" : "Whether guest users may join the room and participate in it. If they can, they will be subject to ordinary power level rules like any other user."
        },
        "avatar_url" : {
          "type" : "string",
          "description" : "The URL for the room's avatar, if one is set."
        }
      },
      "description" : "Public rooms chunk."
    },
    "PublicRoomsFilter" : {
      "type" : "object",
      "properties" : {
        "generic_search_term" : {
          "type" : "string",
          "description" : "A string to search for in the room metadata, e.g. name, topic, canonical alias etc. (Optional)."
        }
      },
      "description" : "Search filter."
    },
    "PublicRoomsRequest" : {
      "type" : "object",
      "properties" : {
        "limit" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Limit the number of results returned."
        },
        "since" : {
          "type" : "string",
          "description" : "A pagination token from a previous request, allowing clients to get the next (or previous) batch of rooms. lThe direction of pagination is specified solely by which token is supplied, rather than via an explicit flag."
        },
        "filter" : {
          "description" : "Filter to apply to the results.",
          "$ref" : "#/definitions/PublicRoomsFilter"
        }
      },
      "description" : "JSON body request."
    },
    "PublicRoomsResponse" : {
      "type" : "object",
      "required" : [ "chunk" ],
      "properties" : {
        "chunk" : {
          "type" : "array",
          "description" : "A paginated chunk of public rooms.",
          "items" : {
            "$ref" : "#/definitions/PublicRoomsChunk"
          }
        },
        "next_batch" : {
          "type" : "string",
          "description" : "A pagination token for the response. The absence of this token means there are no more results to fetch and the client should stop paginating."
        },
        "prev_batch" : {
          "type" : "string",
          "description" : "A pagination token that allows fetching previous results. The absence of this token means there are no results before this batch, i.e. this is the first batch."
        },
        "total_room_count_estimate" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "An estimate on the total number of public rooms, if the server has an estimate."
        }
      },
      "description" : "JSON body request."
    },
    "PushActions" : {
      "type" : "object",
      "required" : [ "actions" ],
      "properties" : {
        "actions" : {
          "type" : "array",
          "description" : "The action(s) to perform for this rule.",
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "JSON body request/response for action push api."
    },
    "PushCondition" : {
      "type" : "object",
      "required" : [ "kind" ],
      "properties" : {
        "kind" : {
          "type" : "string",
          "enum" : [ "[\"event_match\"", "\"contains_display_name\"", "\"room_member_count\"]" ]
        },
        "key" : {
          "type" : "string",
          "description" : "Required for event_match conditions. The dot- separated field of the event to match."
        },
        "pattern" : {
          "type" : "string",
          "description" : "Required for event_match conditions. The glob- style pattern to match against. Patterns with no special glob characters should be treated as having asterisks prepended and appended when testing the condition."
        },
        "is" : {
          "type" : "string",
          "description" : "Required for room_member_count conditions. A decimal integer optionally prefixed by one of, ==, <, >, >= or <=. A prefix of < matches rooms where the member count is strictly less than the given number and so forth. If no prefix is present, this parameter defaults to==."
        }
      },
      "description" : "Push condition."
    },
    "PushEnable" : {
      "type" : "object",
      "required" : [ "enabled" ],
      "properties" : {
        "enabled" : {
          "type" : "boolean",
          "description" : "Whether the push rule is enabled or not."
        }
      },
      "description" : "JSON body request/response for enable/disable push api."
    },
    "PushRule" : {
      "type" : "object",
      "required" : [ "actions", "default", "enabled", "rule_id" ],
      "properties" : {
        "actions" : {
          "type" : "array",
          "description" : "The actions to perform when this rule is matched.",
          "items" : {
            "type" : "object"
          }
        },
        "enabled" : {
          "type" : "boolean",
          "description" : "Whether the push rule is enabled or not."
        },
        "conditions" : {
          "type" : "array",
          "description" : "The conditions that must hold true for an event in order for a rule to be applied to an event. A rule with no conditions always matches. Only applicable to underride and override rules.",
          "items" : {
            "$ref" : "#/definitions/PushCondition"
          }
        },
        "pattern" : {
          "type" : "string",
          "description" : "The glob-style pattern to match against. Only applicable to content rules."
        },
        "default" : {
          "type" : "boolean",
          "description" : "Whether this is a default rule, or has been set explicitly."
        },
        "rule_id" : {
          "type" : "string",
          "description" : "The ID of this rule."
        }
      },
      "description" : "Push rule."
    },
    "PushRulesResponse" : {
      "type" : "object",
      "required" : [ "global" ],
      "properties" : {
        "global" : {
          "description" : "The global ruleset.",
          "$ref" : "#/definitions/Ruleset"
        }
      },
      "description" : "JSON body response for push api."
    },
    "PushUpdateRequest" : {
      "type" : "object",
      "required" : [ "actions" ],
      "properties" : {
        "actions" : {
          "type" : "array",
          "description" : "The action(s) to perform when the conditions for this rule are met.",
          "items" : {
            "type" : "string"
          }
        },
        "conditions" : {
          "type" : "array",
          "description" : "The conditions that must hold true for an event in order for a rule to be applied to an event. A rule with no conditions always matches. Only applicable to underride and override rules.",
          "items" : {
            "$ref" : "#/definitions/PushCondition"
          }
        },
        "pattern" : {
          "type" : "string",
          "description" : "Only applicable to content rules. The glob- style pattern to match against."
        }
      },
      "description" : "JSON body request for push update api."
    },
    "Pusher" : {
      "type" : "object",
      "properties" : {
        "pushkey" : {
          "type" : "string",
          "description" : "This is a unique identifier for this pusher. See /set for more detail. Max length, 512 bytes."
        },
        "kind" : {
          "type" : "string",
          "description" : "The kind of pusher. \"http\" is a pusher that sends HTTP pokes."
        },
        "lang" : {
          "type" : "string",
          "description" : "The preferred language for receiving notifications (e.g. 'en' or 'en-US')"
        },
        "data" : {
          "description" : "A dictionary of information for the pusher implementation itself.",
          "$ref" : "#/definitions/PusherData"
        },
        "app_id" : {
          "type" : "string",
          "description" : "This is a reverse-DNS style identifier for the application. Max length, 64 chars."
        },
        "app_display_name" : {
          "type" : "string",
          "description" : "A string that will allow the user to identify what application owns this pusher."
        },
        "device_display_name" : {
          "type" : "string",
          "description" : "A string that will allow the user to identify what device owns this pusher."
        },
        "profile_tag" : {
          "type" : "string",
          "description" : "This string determines which set of device specific rules this pusher executes."
        }
      },
      "description" : "Pusher. A pusher is a worker on the homeserver that manages the sending of HTTP notifications for a user. A user can have multiple pushers: one per device."
    },
    "PusherData" : {
      "type" : "object",
      "properties" : {
        "url" : {
          "type" : "string",
          "description" : "Required if kind is http. The URL to use to send notifications to."
        }
      },
      "description" : "Pusher data."
    },
    "PushersRequest" : {
      "type" : "object",
      "properties" : {
        "pushkey" : {
          "type" : "string",
          "description" : "This is a unique identifier for this pusher. See /set for more detail. Max length, 512 bytes."
        },
        "kind" : {
          "type" : "string",
          "description" : "The kind of pusher. \"http\" is a pusher that sends HTTP pokes."
        },
        "lang" : {
          "type" : "string",
          "description" : "The preferred language for receiving notifications (e.g. 'en' or 'en-US')"
        },
        "data" : {
          "description" : "A dictionary of information for the pusher implementation itself.",
          "$ref" : "#/definitions/PusherData"
        },
        "append" : {
          "type" : "boolean",
          "description" : "If true, the homeserver should add another pusher with the given pushkey and App ID in addition to any others with different user IDs. Otherwise, the homeserver must remove any other pushers with the same App ID and pushkey for different users. The default is false."
        },
        "app_id" : {
          "type" : "string",
          "description" : "This is a reverse-DNS style identifier for the application. Max length, 64 chars."
        },
        "app_display_name" : {
          "type" : "string",
          "description" : "A string that will allow the user to identify what application owns this pusher."
        },
        "device_display_name" : {
          "type" : "string",
          "description" : "A string that will allow the user to identify what device owns this pusher."
        },
        "profile_tag" : {
          "type" : "string",
          "description" : "This string determines which set of device specific rules this pusher executes."
        }
      },
      "description" : "JSON body request to create a new pusher."
    },
    "PushersResponse" : {
      "type" : "object",
      "properties" : {
        "pushers" : {
          "type" : "array",
          "description" : "An array containing the current pushers for the user.",
          "items" : {
            "$ref" : "#/definitions/Pusher"
          }
        }
      },
      "description" : "Pusher list."
    },
    "QueryRequest" : {
      "type" : "object",
      "required" : [ "device_keys" ],
      "properties" : {
        "timeout" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The time (in milliseconds) to wait when downloading keys from remote servers. 10 seconds is the recommended default."
        },
        "token" : {
          "type" : "string",
          "description" : "If the client is fetching keys as a result of a device update received in a sync request, this should be the 'since' token of that sync request, or any later sync token. This allows the server to ensure its response contains the keys advertised by the notification in that sync."
        },
        "device_keys" : {
          "type" : "object",
          "description" : "The keys to be downloaded. A map from user ID, to a list of device IDs, or to an empty list to indicate all devices for the corresponding user.",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "description" : "JSON body parameters for Returns the current devices and identity keys for the given users."
    },
    "QueryResponse" : {
      "type" : "object",
      "properties" : {
        "failures" : {
          "type" : "object",
          "description" : "If any remote homeservers could not be reached, they are recorded here. The names of the properties are the names of the unreachable servers.",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "device_keys" : {
          "type" : "object",
          "description" : "Information on the queried devices. A map from user ID, to a map from device ID to device information. For each device, the information returned will be the same as uploaded via /keys/upload, with the addition of an unsigned property.",
          "additionalProperties" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/definitions/DeviceKeys"
            }
          }
        }
      },
      "description" : "Query response."
    },
    "RedactRequest" : {
      "type" : "object",
      "properties" : {
        "reason" : {
          "type" : "string",
          "description" : "The reason for the event being redacted."
        }
      },
      "description" : "Request for the redaction."
    },
    "RegisterRequest" : {
      "type" : "object",
      "properties" : {
        "auth" : {
          "description" : "Additional authentication information for the user-interactive authentication API. Note that this information is not used to define how the registered user should be authenticated, but is instead used to authenticate the register call itself. It should be left empty, or omitted, unless an earlier call returned an response with status code 401.",
          "$ref" : "#/definitions/AuthenticationData"
        },
        "username" : {
          "type" : "string",
          "description" : "The basis for the localpart of the desired Matrix ID. If omitted, the homeserver MUST generate a Matrix ID local part."
        },
        "password" : {
          "type" : "string",
          "description" : "The desired password for the account."
        },
        "bind_email" : {
          "type" : "boolean",
          "description" : "If true, the server binds the email used for authentication to the Matrix ID with the ID Server."
        },
        "device_id" : {
          "type" : "string",
          "description" : "ID of the client device. If this does not correspond to a known client device, a new device will be created. The server will auto-generate a device_id if this is not specified."
        },
        "initial_device_display_name" : {
          "type" : "string",
          "description" : "A display name to assign to the newly-created device. Ignored if device_id corresponds to a known device."
        }
      },
      "description" : "Request for register for an account on this homeserver."
    },
    "ReportRequest" : {
      "type" : "object",
      "required" : [ "reason", "score" ],
      "properties" : {
        "score" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The score to rate this content as where -100 is most offensive and 0 is inoffensive."
        },
        "reason" : {
          "type" : "string",
          "description" : "The reason the content is being reported. May be blank."
        }
      },
      "description" : "JSON Body for report request."
    },
    "RequestCategories" : {
      "type" : "object",
      "properties" : {
        "room_events" : {
          "description" : "Mapping of category name to search criteria.",
          "$ref" : "#/definitions/RoomEvents"
        }
      },
      "description" : "Categories."
    },
    "RequestToken" : {
      "type" : "object",
      "required" : [ "client_secret", "email", "send_attempt" ],
      "properties" : {
        "email" : {
          "type" : "string",
          "description" : "The email address"
        },
        "id_server" : {
          "type" : "string",
          "description" : "The ID server to send the onward request to as a hostname with an appended colon and port number if the port is not the default."
        },
        "client_secret" : {
          "type" : "string",
          "description" : "Client-generated secret string used to protect this session."
        },
        "send_attempt" : {
          "type" : "string",
          "description" : "Used to distinguish protocol level retries from requests to re-send the email."
        }
      },
      "description" : "Request for the proxies the identity server API validate/email/requestToken."
    },
    "ResponseCategories" : {
      "type" : "object",
      "properties" : {
        "room_events" : {
          "description" : "Mapping of category name to search criteria.",
          "$ref" : "#/definitions/RoomEventResults"
        }
      },
      "description" : "Response categories."
    },
    "Result" : {
      "type" : "object",
      "properties" : {
        "rank" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "A number that describes how closely this result matches the search. Higher is closer."
        },
        "result" : {
          "description" : "The event that matched.",
          "$ref" : "#/definitions/Event"
        },
        "context" : {
          "description" : "Context for result, if requested.",
          "$ref" : "#/definitions/EventContextResponse"
        }
      },
      "description" : "Search result."
    },
    "Room filter." : {
      "type" : "object",
      "properties" : {
        "rooms" : {
          "type" : "array",
          "description" : "A list of room IDs to include. If this list is absent then all rooms are included. This filter is applied before the filters in ephemeral, state, timeline or account_data.",
          "items" : {
            "type" : "string"
          }
        },
        "ephemeral" : {
          "description" : "The events that aren't recorded in the room history, e.g. typing and receipts, to include for rooms.",
          "$ref" : "#/definitions/RoomEventFilter"
        },
        "state" : {
          "description" : "The state events to include for rooms.",
          "$ref" : "#/definitions/RoomEventFilter"
        },
        "timeline" : {
          "description" : "The message and state update events to include for rooms.",
          "$ref" : "#/definitions/RoomEventFilter"
        },
        "not_rooms" : {
          "type" : "array",
          "description" : "A list of room IDs to exclude. If this list is absent then no rooms are excluded. A matching room will be excluded even if it is listed in the 'rooms' filter. This filter is applied before the filters in ephemeral, state, timeline or account_data.",
          "items" : {
            "type" : "string"
          }
        },
        "include_leave" : {
          "type" : "boolean",
          "description" : "Include rooms that the user has left in the sync, default false."
        },
        "account_data" : {
          "description" : "The per user account data to include for rooms.",
          "$ref" : "#/definitions/RoomEventFilter"
        }
      }
    },
    "RoomEventFilter" : {
      "type" : "object",
      "properties" : {
        "limit" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The maximum number of events to return."
        },
        "senders" : {
          "type" : "array",
          "description" : "A list of senders IDs to include. If this list is absent then all senders are included.",
          "items" : {
            "type" : "string"
          }
        },
        "types" : {
          "type" : "array",
          "description" : "A list of event types to include. If this list is absent then all event types are included. A '*' can be used as a wildcard to match any sequence of characters.",
          "items" : {
            "type" : "string"
          }
        },
        "rooms" : {
          "type" : "array",
          "description" : "A list of room IDs to include. If this list is absent then all rooms are included.",
          "items" : {
            "type" : "string"
          }
        },
        "not_senders" : {
          "type" : "array",
          "description" : "A list of sender IDs to exclude. If this list is absent then no senders are excluded. A matching sender will be excluded even if it is listed in the 'senders' filter.",
          "items" : {
            "type" : "string"
          }
        },
        "not_types" : {
          "type" : "array",
          "description" : "A list of event types to exclude. If this list is absent then no event types are excluded. A matching type will be excluded even if it is listed in the 'types' filter. A '*' can be used as a wildcard to match any sequence of characters.",
          "items" : {
            "type" : "string"
          }
        },
        "not_rooms" : {
          "type" : "array",
          "description" : "A list of room IDs to exclude. If this list is absent then no rooms are excluded. A matching room will be excluded even if it is listed in the 'rooms' filter.",
          "items" : {
            "type" : "string"
          }
        },
        "contains_url" : {
          "type" : "boolean",
          "description" : "If true, includes only events with a url key in their content. If false, excludes those events."
        }
      },
      "description" : "Room event filter."
    },
    "RoomEventResults" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "An approximate count of the total number of results found."
        },
        "results" : {
          "type" : "array",
          "description" : "List of results in the requested order.",
          "items" : {
            "$ref" : "#/definitions/Result"
          }
        },
        "state" : {
          "type" : "object",
          "description" : "The current state for every room in the results. This is included if the request had the include_state key set with a value of true.",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/Event"
            }
          }
        },
        "groups" : {
          "type" : "object",
          "description" : "Any groups that were requested.",
          "additionalProperties" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/definitions/GroupValue"
            }
          }
        },
        "next_batch" : {
          "type" : "string",
          "description" : "Token that can be used to get the next batch of results, by passing as the next_batch parameter to the next call. If this field is absent, there are no more results."
        }
      },
      "description" : "Room events results."
    },
    "RoomEvents" : {
      "type" : "object",
      "required" : [ "search_term" ],
      "properties" : {
        "keys" : {
          "type" : "array",
          "description" : "The keys to search.",
          "items" : {
            "type" : "string"
          }
        },
        "filter" : {
          "description" : "This takes a filter.",
          "$ref" : "#/definitions/Filter"
        },
        "groupings" : {
          "description" : "Requests that the server partitions the result set based on the provided list of keys.",
          "$ref" : "#/definitions/Groupings"
        },
        "search_term" : {
          "type" : "string",
          "description" : "The string to search events for."
        },
        "order_by" : {
          "type" : "string",
          "description" : "The order in which to search for results.",
          "enum" : [ "[\"recent\"", "\"rank\"]" ]
        },
        "event_context" : {
          "description" : "Configures whether any context for the events returned are included in the response.",
          "$ref" : "#/definitions/EventContext"
        },
        "include_state" : {
          "type" : "boolean",
          "description" : "Requests the server return the current state for each room returned."
        }
      },
      "description" : "Room events."
    },
    "RoomId" : {
      "type" : "object",
      "properties" : {
        "servers" : {
          "type" : "array",
          "description" : "A list of servers that are aware of this room alias.",
          "items" : {
            "type" : "string"
          }
        },
        "room_id" : {
          "type" : "string",
          "description" : "The created room's ID."
        }
      },
      "description" : "JSON body with roomId used in the room apis."
    },
    "RoomMember" : {
      "type" : "object",
      "properties" : {
        "display_name" : {
          "type" : "string",
          "description" : "The display name of the user this object is representing."
        },
        "avatar_url" : {
          "type" : "string",
          "description" : "The mxc avatar url of the user this object is representing."
        }
      },
      "description" : "Room member."
    },
    "RoomVisibility" : {
      "type" : "object",
      "properties" : {
        "visibility" : {
          "type" : "string",
          "description" : "The visibility of the room in the directory.",
          "enum" : [ "[\"private\"", "\"public\"]" ]
        }
      },
      "description" : "JSON body request and response for listing room api."
    },
    "Rooms" : {
      "type" : "object",
      "properties" : {
        "join" : {
          "type" : "object",
          "description" : "The rooms that the user has joined.",
          "additionalProperties" : {
            "$ref" : "#/definitions/JoinedRoom"
          }
        },
        "invite" : {
          "type" : "object",
          "description" : "The rooms that the user has been invited to.",
          "additionalProperties" : {
            "$ref" : "#/definitions/InvitedRoom"
          }
        },
        "leave" : {
          "type" : "object",
          "description" : "The rooms that the user has left or been banned from.",
          "additionalProperties" : {
            "$ref" : "#/definitions/LeftRoom"
          }
        }
      },
      "description" : "Rooms."
    },
    "Ruleset" : {
      "type" : "object",
      "properties" : {
        "content" : {
          "type" : "array",
          "description" : "Content rules.",
          "items" : {
            "$ref" : "#/definitions/PushRule"
          }
        },
        "override" : {
          "type" : "array",
          "description" : "Override rules.",
          "items" : {
            "$ref" : "#/definitions/PushRule"
          }
        },
        "room" : {
          "type" : "array",
          "description" : "Room rules.",
          "items" : {
            "$ref" : "#/definitions/PushRule"
          }
        },
        "sender" : {
          "type" : "array",
          "description" : "Sender rules.",
          "items" : {
            "$ref" : "#/definitions/PushRule"
          }
        },
        "underride" : {
          "type" : "array",
          "description" : "UNderride rules.",
          "items" : {
            "$ref" : "#/definitions/PushRule"
          }
        }
      },
      "description" : "Ruleset."
    },
    "SearchRequest" : {
      "type" : "object",
      "required" : [ "search_term" ],
      "properties" : {
        "limit" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The maximum number of results to return (Defaults to 10)."
        },
        "search_term" : {
          "type" : "string",
          "description" : "The term to search for."
        }
      },
      "description" : "JSON body request for user directory api (search)."
    },
    "SearchResponse" : {
      "type" : "object",
      "required" : [ "limit", "results" ],
      "properties" : {
        "results" : {
          "type" : "array",
          "description" : "Ordered by rank and then whether or not profile info is available.",
          "items" : {
            "$ref" : "#/definitions/User"
          }
        },
        "limit" : {
          "type" : "boolean",
          "description" : "Indicates if the result list has been truncated by the limit."
        }
      },
      "description" : "JSON body response for user directory api (search result)."
    },
    "SendEventResponse" : {
      "type" : "object",
      "properties" : {
        "event_id" : {
          "type" : "string",
          "description" : "A unique identifier for the event."
        }
      },
      "description" : "Sent event."
    },
    "SendToDeviceRequest" : {
      "type" : "object",
      "properties" : {
        "messages" : {
          "type" : "object",
          "description" : "The messages to send. A map from user ID, to a map from device ID to message body. The device ID may also be *, meaning all known devices for the user.",
          "additionalProperties" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          }
        }
      },
      "description" : "Sent to device body request."
    },
    "SessionInfo" : {
      "type" : "object",
      "properties" : {
        "connections" : {
          "type" : "array",
          "description" : "Information particular connections in the session.",
          "items" : {
            "$ref" : "#/definitions/ConnectionInfo"
          }
        }
      },
      "description" : "Session info."
    },
    "State" : {
      "type" : "object",
      "properties" : {
        "events" : {
          "type" : "array",
          "description" : "List of events.",
          "items" : {
            "$ref" : "#/definitions/Event"
          }
        }
      },
      "description" : "State."
    },
    "StrippedState" : {
      "type" : "object",
      "required" : [ "content", "state_key", "type" ],
      "properties" : {
        "content" : {
          "type" : "object",
          "description" : "The content for the event.",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "type" : {
          "type" : "string",
          "description" : "The type for the event."
        },
        "state_key" : {
          "type" : "string",
          "description" : "The state_key for the event."
        }
      },
      "description" : "Provides information on a subset of state events such as the room name."
    },
    "SyncResponse" : {
      "type" : "object",
      "properties" : {
        "rooms" : {
          "description" : "Updates to rooms.",
          "$ref" : "#/definitions/Rooms"
        },
        "presence" : {
          "description" : "The updates to the presence status of other users.",
          "$ref" : "#/definitions/Presence"
        },
        "next_batch" : {
          "type" : "string",
          "description" : "The batch token to supply in the since param of the next /sync request."
        },
        "account_data" : {
          "description" : "The global private data created by this user.",
          "$ref" : "#/definitions/AccountData"
        },
        "to_device" : {
          "description" : "Information on the send-to-device messages for the client device, as defined in Send-to-Device messaging.",
          "$ref" : "#/definitions/ToDevice"
        },
        "device_lists" : {
          "description" : "Information on end-to-end device updates, as specified in End-to-end encryption.",
          "$ref" : "#/definitions/DeviceLists"
        }
      },
      "description" : "JSON body response for sync api."
    },
    "Tags" : {
      "type" : "object",
      "properties" : {
        "tags" : {
          "type" : "object",
          "description" : "Tags.",
          "additionalProperties" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          }
        }
      },
      "description" : "Tag request."
    },
    "ThirdPartyIdentifier" : {
      "type" : "object",
      "properties" : {
        "medium" : {
          "type" : "string",
          "description" : "The medium of the third party identifier. Must be 'email'"
        },
        "address" : {
          "type" : "string",
          "description" : "The third party identifier address"
        }
      },
      "description" : "Request for gets a list of the third party identifiers that the homeserver has associated with the user's account."
    },
    "ThirdPartySigned" : {
      "type" : "object",
      "required" : [ "mxid", "sender", "signatures", "token" ],
      "properties" : {
        "sender" : {
          "type" : "string",
          "description" : "The Matrix ID of the user who issued the invite."
        },
        "mxid" : {
          "type" : "string",
          "description" : "The Matrix ID of the invitee."
        },
        "token" : {
          "type" : "string",
          "description" : "The state key of the m.third_party_invite event."
        },
        "signatures" : {
          "type" : "object",
          "description" : "A signatures object containing a signature of the entire signed object.",
          "additionalProperties" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        }
      },
      "description" : "Third party signed."
    },
    "ThreePidCred" : {
      "type" : "object",
      "properties" : {
        "sid" : {
          "type" : "string",
          "description" : "Identity server id."
        },
        "client_secret" : {
          "type" : "string",
          "description" : "Identity server client secret."
        },
        "id_server" : {
          "type" : "string",
          "description" : "Url of identity server auth with."
        }
      },
      "description" : "3pid credentials"
    },
    "ThreePidRequest" : {
      "type" : "object",
      "required" : [ "three_pid_creds" ],
      "properties" : {
        "bind" : {
          "type" : "boolean",
          "description" : "Whether the homeserver should also bind this third party identifier to the account's Matrix ID with the passed identity server"
        },
        "three_pid_creds" : {
          "type" : "array",
          "description" : "The third party credentials to associate with the account",
          "items" : {
            "$ref" : "#/definitions/ThreePidCred"
          }
        }
      },
      "description" : "Request for adds contact information to the user's account"
    },
    "ThreePidResponse" : {
      "type" : "object",
      "properties" : {
        "threepids" : {
          "type" : "array",
          "description" : "All 3pids",
          "items" : {
            "$ref" : "#/definitions/ThirdPartyIdentifier"
          }
        }
      },
      "description" : "Response for gets a list of the third party identifiers that the homeserver has associated with the user's account"
    },
    "Timeline" : {
      "type" : "object",
      "properties" : {
        "events" : {
          "type" : "array",
          "description" : "List of events.",
          "items" : {
            "$ref" : "#/definitions/Event"
          }
        },
        "limited" : {
          "type" : "boolean",
          "description" : "True if the number of events returned was limited by the limit on the filter."
        },
        "prev_batch" : {
          "type" : "string",
          "description" : "A token that can be supplied to the from parameter of the rooms/{roomId}/messages endpoint."
        }
      },
      "description" : "Timeline."
    },
    "ToDevice" : {
      "type" : "object",
      "properties" : {
        "events" : {
          "type" : "array",
          "description" : "List of events.",
          "items" : {
            "$ref" : "#/definitions/Event"
          }
        }
      },
      "description" : "To device."
    },
    "TypingRequest" : {
      "type" : "object",
      "required" : [ "typing" ],
      "properties" : {
        "typing" : {
          "type" : "boolean",
          "description" : "Whether the user is typing or not. If false, the timeout key can be omitted."
        },
        "timeout" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The length of time in milliseconds to mark this user as typing."
        }
      },
      "description" : "Typing body request."
    },
    "UnreadNotificationCounts" : {
      "type" : "object",
      "properties" : {
        "highlight_count" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The number of unread notifications for this room with the highlight flag set."
        },
        "notification_count" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The total number of unread notifications for this room."
        }
      },
      "description" : "Unread notification counts."
    },
    "Unsigned" : {
      "type" : "object",
      "properties" : {
        "age" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is."
        },
        "redacted_because" : {
          "description" : "The event that redacted this event, if any.",
          "$ref" : "#/definitions/Event"
        },
        "transaction_id" : {
          "type" : "string",
          "description" : "The client-supplied transaction ID, if the client being given the event is the same one which sent it."
        },
        "prev_content" : {
          "type" : "object",
          "description" : "The previous content for this state. This will be present only for state events appearing in the timeline. If this is not a state event, or there is no previous content, this key will be missing.",
          "additionalProperties" : {
            "type" : "object"
          }
        }
      },
      "description" : "Unsigned addition data."
    },
    "UnsignedDeviceInfo" : {
      "type" : "object",
      "properties" : {
        "device_display_name" : {
          "type" : "string",
          "description" : "The display name which the user set on the device."
        }
      },
      "description" : "Unsigned device info."
    },
    "UploadRequest" : {
      "type" : "object",
      "properties" : {
        "device_keys" : {
          "description" : "Identity keys for the device. May be absent if no new identity keys are required.",
          "$ref" : "#/definitions/DeviceKeys"
        },
        "one_time_keys" : {
          "type" : "object",
          "description" : "One-time public keys for \"pre-key\" messages. The names of the properties should be in the format (algorithm):(key_id). The format of the key is determined by the key algorithm.",
          "additionalProperties" : {
            "type" : "object"
          }
        }
      },
      "description" : "JSON body parameters for Publishes end-to-end encryption keys for the device."
    },
    "UploadResponse" : {
      "type" : "object",
      "required" : [ "one_time_key_counts" ],
      "properties" : {
        "one_time_key_counts" : {
          "type" : "object",
          "description" : "For each key algorithm, the number of unclaimed one-time keys of that type currently held on the server for this device.",
          "additionalProperties" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "description" : "Response format."
    },
    "User" : {
      "type" : "object",
      "required" : [ "user_id" ],
      "properties" : {
        "user_id" : {
          "type" : "string",
          "description" : "The user's matrix user ID."
        },
        "display_name" : {
          "type" : "string",
          "description" : "The display name of the user, if one exists."
        },
        "avatar_url" : {
          "type" : "string",
          "description" : "The avatar url, as an MXC, if one exists."
        }
      },
      "description" : "JSON body response for user directory api (User)."
    },
    "VersionsResponse" : {
      "type" : "object",
      "properties" : {
        "versions" : {
          "type" : "array",
          "description" : "The supported versions.",
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "The versions supported by the server."
    },
    "VoipResponse" : {
      "type" : "object",
      "required" : [ "password", "ttl", "uris", "username" ],
      "properties" : {
        "username" : {
          "type" : "string",
          "description" : "The username to use."
        },
        "password" : {
          "type" : "string",
          "description" : "The password to use."
        },
        "uris" : {
          "type" : "array",
          "description" : "A list of TURN URIs.",
          "items" : {
            "type" : "string"
          }
        },
        "ttl" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The time-to-live in seconds."
        }
      },
      "description" : "The TURN server credentials."
    },
    "WhoamiResponse" : {
      "type" : "object",
      "properties" : {
        "user_id" : {
          "type" : "string",
          "description" : "mxid"
        }
      },
      "description" : "Response for gets information about the owner of a given access token"
    }
  }
}