/*
 * Copyright sablintolya@gmail.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.github.ma1uta.matrix.identity.api;

import io.github.ma1uta.matrix.identity.model.associations.SessionResponse;
import io.github.ma1uta.matrix.identity.model.associations.ValidationResponse;
import io.github.ma1uta.matrix.identity.model.validation.PublishResponse;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.ws.rs.Consumes;
import javax.ws.rs.FormParam;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;

/**
 * Deprecated API.
 */
@Deprecated
@Api(
    value = "Deprecated API."
)
@Path("/_matrix/identity/api/v1")
@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
@Produces(MediaType.APPLICATION_JSON)
public interface DeprecatedApi {

    /**
     * Create a session for validating an email address.
     * <br>
     * The identity server will send an email containing a token. If that token is presented to the identity server in the future,
     * it indicates that that user was able to read the email for that email address, and so we validate ownership of the email address.
     * <br>
     * Note that homeservers offer APIs that proxy this API, adding additional behaviour on top, for example,
     * /register/email/requestToken is designed specifically for use when registering an account and therefore will inform the user
     * if the email address given is already registered on the server.
     *
     * @param clientSecret    Required. A unique string generated by the client, and used to identify the validation attempt.
     *                        It must be a string consisting of the characters [0-9a-zA-Z.=_-]. Its length must not exceed 255
     *                        characters and it must not be empty.
     * @param email           Required. The email address to validate.
     * @param sendAttempt     Required. The server will only send an email if the send_attempt is a number greater than the most recent
     *                        one which it has seen, scoped to that email + client_secret pair. This is to avoid repeatedly sending the
     *                        same email in the case of request retries between the POSTing user and the identity server. The client
     *                        should increment this value if they desire a new email (e.g. a reminder) to be sent.
     * @param nextLink        Optional. When the validation is completed, the identity server will redirect the user to this URL.
     * @param servletRequest  Servlet request.
     * @param servletResponse Servlet response.
     * @return <p> Status code 200: Session created.</p>
     * <p>Status code 400: An error ocurred. Some possible errors are:</p>
     * <ul>
     * <li>M_INVALID_EMAIL: The email address provided was invalid.</li>
     * <li>M_EMAIL_SEND_ERROR: The validation email could not be sent.</li>
     * </ul>
     */
    @Deprecated
    @ApiOperation(
        value = "Create a session for validating an email address.",
        notes = "The identity server will send an email containing a token. If that token is presented to the identity server in"
            + " the future, it indicates that that user was able to read the email for that email address, and so we validate ownership"
            + " of the email address.\nNote that homeservers offer APIs that proxy this API, adding additional behaviour on top,"
            + " for example,/register/email/requestToken is designed specifically for use when registering an account and therefore will"
            + " inform the user if the email address given is already registered on the server."
    )
    @ApiResponses( {
        @ApiResponse(code = 200, message = "Session created."),
        @ApiResponse(code = 400, message = "An error ocurred.")
    })
    @POST
    @Path("/validate/email/requestToken")
    SessionResponse createEmailSessionDeprecated(
        @ApiParam(
            value = "A unique string generated by the client, and used to identify the validation attempt. It must be a string"
                + " consisting of the characters [0-9a-zA-Z.=_-]. Its length must not exceed 255 characters and it must not be empty.",
            required = true
        ) @FormParam("client_secret") String clientSecret,
        @ApiParam(
            value = "The email address to validate.",
            required = true
        ) @FormParam("email") String email,
        @ApiParam(
            name = "send_attempt",
            value = "The server will only send an email if the send_attempt is a number greater than the most recent"
                + " one which it has seen, scoped to that email + client_secret pair. This is to avoid repeatedly sending the"
                + " same email in the case of request retries between the POSTing user and the identity server. The client"
                + " should increment this value if they desire a new email (e.g. a reminder) to be sent.",
            required = true
        ) @FormParam("send_attempt") Long sendAttempt,
        @ApiParam(
            name = "next_link",
            value = "When the validation is completed, the identity server will redirect the user to this URL."
        ) @FormParam("next_link") String nextLink,

        @Context HttpServletRequest servletRequest,
        @Context HttpServletResponse servletResponse
    );

    /**
     * Validate ownership of an email address.
     * <br>
     * If the three parameters are consistent with a set generated by a requestToken call, ownership of the email address is
     * considered to have been validated. This does not publish any information publicly, or associate the email address with any
     * Matrix user ID. Specifically, calls to /lookup will not show a binding.
     * <br>
     * The identity server is free to match the token case-insensitively, or carry out other mapping operations such as unicode
     * normalisation. Whether to do so is an implementation detail for the identity server. Clients must always pass on the token
     * without modification.
     *
     * @param sid             Required. The session ID, generated by the requestToken call.
     * @param clientSecret    Required. The client secret that was supplied to the requestToken call.
     * @param token           Required. The token generated by the requestToken call and emailed to the user.
     * @param servletRequest  Servlet request.
     * @param servletResponse Servlet response.
     * @return <p>Status code 200: The success of the validation.</p>
     */
    @Deprecated
    @ApiOperation(
        value = "Validate ownership of an email address.",
        notes = "If the three parameters are consistent with a set generated by a requestToken call, ownership of the email address is"
            + " considered to have been validated. This does not publish any information publicly, or associate the email address with any"
            + " Matrix user ID. Specifically, calls to /lookup will not show a binding.\nThe identity server is free to match the token"
            + " case-insensitively, or carry out other mapping operations such as unicode normalisation. Whether to do so is"
            + " an implementation detail for the identity server. Clients must always pass on the token without modification."
    )
    @ApiResponses( {
        @ApiResponse(code = 200, message = "The success of the validation.")
    })
    @POST
    @Path("/validate/email/submitToken")
    ValidationResponse postValidateEmailDeprecated(
        @ApiParam(
            value = "The session ID, generated by the requestToken call.",
            required = true
        ) @FormParam("sid") String sid,
        @ApiParam(
            name = "client_secret",
            value = "The client secret that was supplied to the requestToken call.",
            required = true
        ) @FormParam("client_secret") String clientSecret,
        @ApiParam(
            value = "The token generated by the requestToken call and emailed to the user.",
            required = true
        ) @FormParam("token") String token,

        @Context HttpServletRequest servletRequest,
        @Context HttpServletResponse servletResponse
    );

    /**
     * Create a session for validating a phone number.
     * <br>
     * The identity server will send an SMS message containing a token. If that token is presented to the identity server in the future,
     * it indicates that that user was able to read the SMS for that phone number, and so we validate ownership of the phone number.
     * <br>
     * Note that homeservers offer APIs that proxy this API, adding additional behaviour on top, for example, /register/msisdn/requestToken
     * is designed specifically for use when registering an account and therefore will inform the user if the phone number given is already
     * registered on the server.
     *
     * @param clientSecret    Required. A unique string generated by the client, and used to identify the validation attempt.
     *                        It must be a string consisting of the characters [0-9a-zA-Z.=_-]. Its length must not exceed 255
     *                        characters and it must not be empty.
     * @param country         Required. The two-letter uppercase ISO country code that the number in phone_number should be parsed as
     *                        if it were dialled from.
     * @param phoneNumber     Required. The phone number to validate.
     * @param sendAttempt     Required. The server will only send an SMS if the send_attempt is a number greater than the most recent
     *                        one which it has seen, scoped to that country + phone_number + client_secret triple. This is to avoid
     *                        repeatedly sending the same SMS in the case of request retries between the POSTing user and the identity
     *                        server. The client should increment this value if they desire a new SMS (e.g. a reminder) to be sent.
     * @param nextLink        Optional. When the validation is completed, the identity server will redirect the user to this URL.
     * @param servletRequest  Servlet request.
     * @param servletResponse Servlet response.
     * @return <p>Status code 200: Session created.</p>
     * <p>Status code 400: An error ocurred. Some possible errors are:</p>
     * <ul>
     * <li>M_INVALID_ADDRESS: The phone number provided was invalid.</li>
     * <li>M_SEND_ERROR: The validation SMS could not be sent.</li>
     * <li>M_DESTINATION_REJECTED: The identity server cannot deliver an SMS to the provided country or region.</li>
     * </ul>
     */
    @Deprecated
    @ApiOperation(
        value = "Create a session for validating a phone number.",
        notes = "The identity server will send an SMS message containing a token. If that token is presented to the identity server"
            + " in the future, it indicates that that user was able to read the SMS for that phone number, and so we validate ownership"
            + " of the phone number.\nNote that homeservers offer APIs that proxy this API, adding additional behaviour on top,"
            + " for example, /register/msisdn/requestToken is designed specifically for use when registering an account and therefore will"
            + " inform the user if the phone number given is already registered on the server."
    )
    @ApiResponses( {
        @ApiResponse(code = 200, message = "Session created."),
        @ApiResponse(code = 400, message = "An error occured.")
    })
    @POST
    @Path("/validate/msisdn/requestToken")
    SessionResponse createPhoneSessionDeprecated(
        @ApiParam(
            name = "client_secret",
            value = "A unique string generated by the client, and used to identify the validation attempt. It must be a string"
                + " consisting of the characters [0-9a-zA-Z.=_-]. Its length must not exceed 255 characters and it must not be empty.",
            required = true
        ) @FormParam("client_secret") String clientSecret,
        @ApiParam(
            value = "The two-letter uppercase ISO country code that the number in phone_number should be parsed as if it were"
                + " dialled from.",
            required = true
        ) @FormParam("country") String country,
        @ApiParam(
            name = "phone_number",
            value = "The phone number to validate.",
            required = true
        ) @FormParam("phone_number") String phoneNumber,
        @ApiParam(
            name = "send_attempt",
            value = "The server will only send an SMS if the send_attempt is a number greater than the most recent one which it"
                + " has seen, scoped to that country + phone_number + client_secret triple. This is to avoid repeatedly sending the"
                + " same SMS in the case of request retries between the POSTing user and the identity server. The client should increment"
                + " this value if they desire a new SMS (e.g. a reminder) to be sent.",
            required = true
        ) @FormParam("send_attempt") Long sendAttempt,
        @ApiParam(
            name = "next_link",
            value = "When the validation is completed, the identity server will redirect the user to this URL."
        ) @FormParam("next_link") String nextLink,

        @Context HttpServletRequest servletRequest,
        @Context HttpServletResponse servletResponse
    );

    /**
     * Validate ownership of a phone number.
     * <br>
     * If the three parameters are consistent with a set generated by a requestToken call, ownership of the email address is
     * considered to have been validated. This does not publish any information publicly, or associate the email address with any
     * Matrix user ID. Specifically, calls to /lookup will not show a binding.
     * <br>
     * The identity server is free to match the token case-insensitively, or carry out other mapping operations such as unicode
     * normalisation. Whether to do so is an implementation detail for the identity server. Clients must always pass on the token
     * without modification.
     *
     * @param sid             Required. The session ID, generated by the requestToken call.
     * @param clientSecret    Required. The client secret that was supplied to the requestToken call.
     * @param token           Required. The token generated by the requestToken call and sent to the user.
     * @param servletRequest  Servlet request.
     * @param servletResponse Servlet response.
     * @return <p>Status code 200: The success of the validation.</p>
     */
    @Deprecated
    @ApiOperation(
        value = "Validate ownership of a phone number.",
        notes = "If the three parameters are consistent with a set generated by a requestToken call, ownership of the email address is"
            + " considered to have been validated. This does not publish any information publicly, or associate the email address with any"
            + " Matrix user ID. Specifically, calls to /lookup will not show a binding.\nThe identity server is free to match the token"
            + " case-insensitively, or carry out other mapping operations such as unicode normalisation. Whether to do so is"
            + " an implementation detail for the identity server. Clients must always pass on the token without modification."
    )
    @ApiResponses( {
        @ApiResponse(code = 200, message = "The success of the validation.")
    })
    @POST
    @Path("/validate/msisdn/submitToken")
    ValidationResponse postValidatePhoneDeprecated(
        @ApiParam(
            value = "The session ID, generated by the requestToken call.",
            required = true
        ) @FormParam("sid") String sid,
        @ApiParam(
            name = "client_secret",
            value = "The client secret that was supplied to the requestToken call.",
            required = true
        ) @FormParam("client_secret") String clientSecret,
        @ApiParam(
            value = "The token generated by the requestToken call and sent to the user.",
            required = true
        ) @FormParam("token") String token,

        @Context HttpServletRequest servletRequest,
        @Context HttpServletResponse servletResponse
    );

    /**
     * Publish an association between a session and a Matrix user ID.
     * <br>
     * Future calls to /lookup for any of the session's 3pids will return this association.
     *
     * @param sid             Required. The Session ID generated by the requestToken call.
     * @param clientSecret    Required. The client secret passed to the requestToken call.
     * @param mxid            Required. The Matrix user ID to associate with the 3pids.
     * @param servletRequest  Servlet request.
     * @param servletResponse Servlet response.
     * @return <p>Status code 200: The association was published.</p>
     * <p>Status code 400: The association was not published. If the session has not been validated, then errcode will be
     * M_SESSION_NOT_VALIDATED. If the session has timed out, then errcode will be M_SESSION_EXPIRED.</p>
     * <p>Status code 404: The Session ID or client secret were not found.</p>
     */
    @Deprecated
    @ApiOperation(
        value = "Publish an association between a session and a Matrix user ID.",
        notes = "Future calls to /lookup for any of the session's 3pids will return this association."
    )
    @ApiResponses( {
        @ApiResponse(code = 200, message = "The association was published."),
        @ApiResponse(code = 400, message = "The association was not published. If the session has not been validated, then errcode will be"
            + " M_SESSION_NOT_VALIDATED. If the session has timed out, then errcode will be M_SESSION_EXPIRED."),
        @ApiResponse(code = 404, message = "he Session ID or client secret were not found.")
    })
    @POST
    @Path("/bind")
    PublishResponse publishDeprecated(
        @ApiParam(
            value = "The Session ID generated by the requestToken call.",
            required = true
        ) @FormParam("sid") String sid,
        @ApiParam(
            name = "client_secret",
            value = "The client secret passed to the requestToken call.",
            required = true
        ) @FormParam("client_secret") String clientSecret,
        @ApiParam(
            value = "The Matrix user ID to associate with the 3pids.",
            required = true
        ) @FormParam("mxid") String mxid,

        @Context HttpServletRequest servletRequest,
        @Context HttpServletResponse servletResponse
    );
}
