/*
 * Copyright sablintolya@gmail.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.github.ma1uta.matrix.identity.api;

import io.github.ma1uta.matrix.identity.model.validation.PublishRequest;
import io.github.ma1uta.matrix.identity.model.validation.PublishResponse;
import io.github.ma1uta.matrix.identity.model.validation.ValidationResponse;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

import javax.servlet.http.HttpServletRequest;
import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.container.AsyncResponse;
import javax.ws.rs.container.Suspended;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;

/**
 * Checking the validation of the 3pid ownership.
 */
@Api(
    value = "Validation",
    description = "Checking the validation of the 3pid ownership."
)
@Path("/_matrix/identity/api/v1")
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
public interface ValidationApi {

    /**
     * Determines if a given 3pid has been validated by a user.
     * <br>
     * Return: {@link ValidationResponse}.
     * <p>Status code 200: Validation information for the session.</p>
     * <p>Status code 400: The session has not been validated. If the session has not been validated, then errcode will be
     * M_SESSION_NOT_VALIDATED. If the session has timed out, then errcode will be M_SESSION_EXPIRED.</p>
     * <p>Status code 404: The Session ID or client secret were not found.</p>
     *
     * @param sid            Required. The Session ID generated by the requestToken call.
     * @param clientSecret   Required. The client secret passed to the requestToken call.
     * @param servletRequest Servlet request.
     * @param asyncResponse  Asynchronous response.
     */
    @ApiOperation(
        value = "Determines if a given 3pid has been validated by a user.",
        response = ValidationResponse.class
    )
    @ApiResponses( {
        @ApiResponse(code = 200, message = "Validation information for the session."),
        @ApiResponse(code = 400, message = "he session has not been validated. If the session has not been validated, then errcode will be"
            + " M_SESSION_NOT_VALIDATED. If the session has timed out, then errcode will be M_SESSION_EXPIRED."),
        @ApiResponse(code = 404, message = "The Session ID or client secret were not found.")
    })
    @GET
    @Path("/3pid/getValidated3pid")
    void validate(
        @ApiParam(
            value = "The Session ID generated by the requestToken call.",
            required = true
        ) @QueryParam("sid") String sid,
        @ApiParam(
            value = "The client secret passed to the requestToken call.",
            required = true
        ) @QueryParam("client_secret") String clientSecret,

        @Context HttpServletRequest servletRequest,
        @Suspended AsyncResponse asyncResponse
    );

    /**
     * Publish an association between a session and a Matrix user ID.
     * <br>
     * Future calls to /lookup for any of the session's 3pids will return this association.
     * <br>
     * Return: {@link PublishResponse}.
     * <p>Status code 200: The association was published.</p>
     * <p>Status code 400: The association was not published. If the session has not been validated, then errcode will be
     * M_SESSION_NOT_VALIDATED. If the session has timed out, then errcode will be M_SESSION_EXPIRED.</p>
     * <p>Status code 404: The Session ID or client secret were not found.</p>
     *
     * @param request        JSON body request.
     * @param servletRequest Servlet request.
     * @param asyncResponse  Asynchronous response.
     */
    @ApiOperation(
        value = "Publish an association between a session and a Matrix user ID.",
        notes = "Future calls to /lookup for any of the session's 3pids will return this association.",
        response = PublishResponse.class
    )
    @ApiResponses( {
        @ApiResponse(code = 200, message = "The association was published."),
        @ApiResponse(code = 400, message = "The association was not published. If the session has not been validated, then errcode will be"
            + " M_SESSION_NOT_VALIDATED. If the session has timed out, then errcode will be M_SESSION_EXPIRED."),
        @ApiResponse(code = 404, message = "he Session ID or client secret were not found.")
    })
    @POST
    @Path("/bind")
    void publish(
        @ApiParam(
            value = "JSON boy request",
            required = true
        ) PublishRequest request,

        @Context HttpServletRequest servletRequest,
        @Suspended AsyncResponse asyncResponse
    );
}
